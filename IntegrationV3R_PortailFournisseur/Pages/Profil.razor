@page "/profil"
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models
@using IntegrationV3R_PortailFournisseur.Shared.ComposantsProfile
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ApplicationDbContext _context

<PageTitle>Profil</PageTitle>

<CompConfirmation @ref="compConfirmation" currentMDP="mdp" DeactivateUser="DeactivateUser"></CompConfirmation>
<CompReactivation @ref="compReactivation" ReactivateUser="ReactivateUser"></CompReactivation>
<CompChangementMDP @ref="compChangementMDP" currentMDP="mdp" ChangePassword="ChangePassword"></CompChangementMDP>

<LoadingScreen IsLoading="isLoading" />
@if (showSuccessModifyMessage)
{
    <div class="modal" style="display:block;">
        <div class="modal-boxSize">
            <div class="modal-content" style="display:block;">
                <span class="close mb-2" @onclick="CloseMessage">&times;</span>
                <h3>Le profile à été modifié avec succès! </h3>
                <p class="mt-4">Si les changements ne prennent pas place immédiatement, veuillez rafraîchir la page.</p>
                <p>Merci de votre confiance !</p>
            </div>
        </div>
    </div>
}
<div class="logout-container" style="display:flex; flex-direction:row-reverse">
    <div class="text-end">
        <button class="btn btn-outline-danger button-logout" @onclick="Logout">Déconnexion <img src="/icons/deconnexionblack.png" class="me-1 icon"
                             style="margin-top: 4px;margin-right: 4px; margin-left: 7px; margin-bottom:7px;" />
        </button>
    </div> 
    <div class="text-end">
        <button class="btn btn-outline-primary button-primary mx-3" @onclick="MontrerEtat">
            État demande
        </button>
    </div>
</div>
<div class="container-fluid profile-container">
    <div class="row">
        <!-- Sidebar with Navigation -->
        <div class="col-md-3">
            <div class="nav flex-column nav-pills">
                <button class="btn btn-outline-primary mb-2 @((isIdentificationVisible ? "active" : ""))" @onclick="ShowIdentification">
                    Identification
                </button>
                <button class="btn btn-outline-primary mb-2 @((isAddressVisible ? "active" : ""))" @onclick="ShowAddress">
                    Adresse
                </button>
                <button class="btn btn-outline-primary mb-2 @((isRBQLicencesVisible ? "active" : ""))" @onclick="ShowRBQLicences">
                    Licence RBQ
                </button>
                @if (finance != null)
                {
                    <button class="btn btn-outline-primary mb-2 @((isFinancesVisible ? "active" : ""))" @onclick="ShowFinances">
                        Finances
                    </button>
                }
                <button class="btn btn-outline-primary mb-2 @((isContactsVisible ? "active" : ""))" @onclick="ShowContacts">
                    Contacts
                </button>
                <button class="btn btn-outline-primary mb-2 @((isProductsVisible ? "active" : ""))" @onclick="ShowProducts">
                    Produits
                </button>
                <button class="btn btn-outline-primary mb-2 @((isBrochuresVisible ? "active" : ""))" @onclick="ShowBrochures">
                    Brochures
                </button>
            </div> <!-- nav-pills -->
        </div> <!-- col-md-3 -->
        <!-- Main Content Area -->
        <div class="col-md-9">
            @if (isIdentificationVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Identification</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileIdentification neq="@neq" nomEntreprise="@nomEntreprise" courrielEntreprise="@courrielEntreprise" />
                    </div>
                </div>
            }

            @if (isAddressVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Adresse</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileAdresse NumeroCiv="@numeroCiv" Rue="@rue" Ville="@ville" Province="@province" CodePostal="@codePostal" RegionAdministrative="@regionAdministrative" NumeroTelephone="@numeroTelephone" />
                    </div>
                </div>
            }

            @if (isRBQLicencesVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Licence RBQ</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileRBQ Licences="@rbqDetails" />
                    </div>
                </div>
            }

            @if (isFinancesVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Finances</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileFinances Tps="@tps" Tvq="@tvq" CodeConditionPaiement="@conditionPaiement" Devise="@devise" ModeCom="@modeCom" />
                    </div>
                </div>
            }

            @if (isContactsVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Contacts</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileContact Contacts="@contacts" />
                    </div>
                </div>
            }

            @if (isProductsVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Produits</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileProduit Products="@products" />
                    </div>
                </div>
            }

            @if (isBrochuresVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Brochures</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileBrochure Brochures="@brochures" />
                    </div>
                </div>
            }

            <!-- Button to navigate to the formulaire page -->
            <div style="display:flex;flex-direction:column;">
                <div class="text-end mb-3">
                    <button class="btn" @onclick="NavigateToFormulaireDemande">
                        Modifier ses informations
                    </button>
                </div>
                <div class="text-end mb-3">
                    <button class="btn" @onclick="ShowChangementMDP">
                        Changer le mot de passe
                    </button>
                </div>

                @if (etatCompte && statut== "Approuvée")
                {
                    <div class="text-end">
                        <button class="btn-supprimer" @onclick="ShowConfirmation">
                            Désactiver le compte
                        </button>
                    </div>
                }
                @if (!etatCompte && statut == "Approuvée")
                {
                    <div class="text-end">
                        <button class="btn-success" @onclick="ShowConfirmationReactivate">
                            Réactiver le compte
                        </button>
                    </div>
                }

            </div>
        </div> <!-- col-md-9 -->
    </div> <!-- row -->
</div> <!-- container-fluid -->

@if (_showEtatDemande)
{
    <div class="modal" style="display:block;">
    <div class="modal-boxSize">
        <div class="modal-content" style="display:block;">
            <span class="close mb-2" @onclick="CloseEtat">&times;</span>
            <div class="container-fluid etat-demande-container">
                @if (isUserAuthenticated)
                {
                    <h3 class="text-center mb-4">Suivi de votre demande</h3>
                    <p class="lead text-center">Bonjour @fournisseur.NomEntreprise </p>

                    @if (fournisseur != null)
                    {
                        <div class="tracking-status mb-5">
                            <p class="text-center">Votre demande est actuellement : <strong>@fournisseur.EtatDemande</strong></p>
                            <p class="text-center">Votre compte est actuellement : <strong>@etat</strong></p>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-warning">Impossible de trouver votre demande. Veuillez réessayer plus tard.</p>
                    }

                    @if (statut == "Approuvée" && finance == null)
                    {
                        <p class="text-center text-danger"><strong>****** - Veuillez modifier votre profil pour inclure vos informations de finances - ***** </strong></p>
                    }

                    <div class="container mt-5">
                        <h3 class="text-center mb-4">État de votre demande :</h3>

                        <div class="d-flex justify-content-center align-items-center tracking-status">
                            <!-- Demande reçue -->
                            <div class="step-container text-center">
                                <i class="fas fa-file-alt fa-4x step-icon"></i>
                                <p>Demande reçue</p>
                            </div>

                            <!-- Ligne reliant les icônes -->
                            <div class="line"></div>

                            <!-- En cours de traitement -->
                            <div class="step-container text-center">
                                <i class="fas fa-clock fa-4x step-icon"></i>
                                <p>En cours de traitement</p>
                            </div>

                            @if (statut == "Approuvée" || statut == "Rejetée")
                            {
                                <!-- Ligne reliant les icônes -->
                                <div class="line"></div>

                                <!-- Demande approuvée ou refusée -->
                                <div class="step-container text-center">
                                    <i class="@GetFinalStepIcon() fa-4x step-icon"></i>
                                    <p>@GetFinalStepText()</p>
                                </div>
                            }

                        </div>

                    </div>
                }
                else
                {
                    <p class="text-center text-warning">Redirection vers la page de connexion...</p>
                }
                </div>
            </div>
        </div>
    </div>
}





@code {
    //POUR ETAT DEMANDE     

    // Statut de la demande
    private string statut = "En attente";
    private string etat = "Désactivé";
    private int fournisseurId = 1;

    private bool _showEtatDemande = false;

    private string GetStatusClass(string status)
    {
        if (fournisseur != null && fournisseur.EtatDemande == status)
        {
            return "active";
        }
        else if (IsStatusCompleted(status))
        {
            return "completed";
        }
        else
        {
            return "";
        }
    }

    private void MontrerEtat()
    {
        _showEtatDemande = true;
    }

    private void CloseEtat()
    {
        _showEtatDemande = false;
    }

    private bool IsStatusCompleted(string status)
    {
        var statusOrder = new List<string> { "En attente", "Approuvée", "Rejetée" };
        var currentIndex = statusOrder.IndexOf(fournisseur.EtatDemande);
        var statusIndex = statusOrder.IndexOf(status);

        return statusIndex <= currentIndex;
    }

    private string GetFinalStepIcon()
    {
        return statut == "Approuvée" ? "fas fa-check-circle" : "fas fa-times-circle";
    }

    private string GetFinalStepText()
    {
        return statut == "Approuvée" ? "Demande Approuvée" : "Demande Rejetée";
    }


    //POUR PROFIL


    private bool isLoading = false;

    private Motsdepass mdp;    
    private CompConfirmation compConfirmation;
    private CompReactivation compReactivation;
    private CompChangementMDP compChangementMDP;
    private bool etatCompte;

    [Parameter] public EventCallback<bool> BDFetched { get; set; }

    private string neq = "";
    private string nomEntreprise = "";
    private string courrielEntreprise = "";

    private bool isIdentificationVisible = true;
    private bool isAddressVisible = false;
    private bool isContactsVisible = false;
    private bool isProductsVisible = false;
    private bool isRBQLicencesVisible = false;
    private bool isFinancesVisible = false;
    private bool isBrochuresVisible = false;

    private bool showSuccessModifyMessage;

    private string numeroCiv = "";
    private string rue = "";
    private string ville = "";
    private string province = "";
    private string codePostal = "";
    private string regionAdministrative = "";
    private string numeroTelephone = "";

    public string tvq = "";
    public string tps = "";
    public string conditionPaiement = "";
    public string devise = "";
    public string modeCom = "";

    private List<Contact> contacts = new List<Contact>();
    private List<Produitsservice> products = new List<Produitsservice>();
    private List<Licencesrbq> rbqDetails = new List<Licencesrbq>();
    private List<Municipalite> municipalites = new List<Municipalite>();
    private List<Province> provinces = new List<Province>();
    private List<Brochure> brochures = new List<Brochure>();

    private void ShowIdentification() { SetVisibility("Identification"); }
    private void ShowAddress() { SetVisibility("Address"); }
    private void ShowContacts() { SetVisibility("Contacts"); }
    private void ShowProducts() { SetVisibility("Products"); }
    private void ShowRBQLicences() { SetVisibility("RBQLicences"); }
    private void ShowFinances() { SetVisibility("Finances"); }
    private void ShowBrochures() { SetVisibility("Brochures"); }

    private void SetVisibility(string section)
    {
        isIdentificationVisible = section == "Identification";
        isAddressVisible = section == "Address";
        isContactsVisible = section == "Contacts";
        isProductsVisible = section == "Products";
        isRBQLicencesVisible = section == "RBQLicences";
        isFinancesVisible = section == "Finances";
        isBrochuresVisible = section == "Brochures";
    }

    private void CloseMessage()
    {
        showSuccessModifyMessage = false;
    }


    protected void ShowConfirmation()
    {
        compConfirmation.Show();
    }

    protected void ShowConfirmationReactivate()
    {
        compReactivation.Show();
    }

    protected void ShowChangementMDP()
    {
        compChangementMDP.Show();
    }

    protected async Task DeactivateUser()
    {
        fournisseur.EtatCompte = false;
        await dbContext.SaveChangesAsync();
        await sessionStorage.ClearAsync();
        Navigation.NavigateTo("/connexion?deactivate=true");
    }

    protected async Task ReactivateUser()
    {
        fournisseur.EtatCompte = true;
        await dbContext.SaveChangesAsync();
        Navigation.NavigateTo("/profil", true);
    }

    private void NavigateToFormulaireDemande()
    {
        Navigation.NavigateTo("/formulaire");
    }

    private void ChangePassword(string newMDP)
    {
        var ipConnexion = HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();
        mdp.IpChangementMdp = ipConnexion;
        mdp.Mdp = newMDP;        
        dbContext.SaveChangesAsync();
        Navigation.NavigateTo("/profil?success=true", true);
    }

    //HYBRIDE
    private Fournisseur fournisseur;
    private Finance finance;
    private User user;

    private bool isUserAuthenticated = false;

    private void Logout()
    {
        sessionStorage.ClearAsync();
        Navigation.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {        
        isLoading = true;
        // Lire l'ID utilisateur depuis le stockage sécurisé
        var userId = await sessionStorage.GetItemAsync<int?>("UserId");

        if (userId == null)
        {
            // L'utilisateur n'est pas connecté, redirection vers la page de connexion
            Navigation.NavigateTo("/connexion");
        }
        else
        {
            isUserAuthenticated = true;


            var uri = new Uri(Navigation.Uri);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (queryParams.TryGetValue("success", out var success) && success == "true")
            {
                showSuccessModifyMessage = true;
            }


            municipalites = await dbContext.Municipalites.Include(m => m.CodeTerritoireNavigation).ToListAsync();
            provinces = await dbContext.Provinces.ToListAsync();
            var regionAdministrativeList = await dbContext.Regionadministratives.ToListAsync();
            var conditionPaiementList = await dbContext.Conditionspaiements.ToListAsync();
            var sousCategories = await dbContext.SouscategorieLicencerbqs
                                .Include(s => s.IdSousCategorieNavigation)  // Ensure we include the navigation property to the subcategory
                                .ToListAsync();  // Fetching all subcategories



            user = await dbContext.Users
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Adresses)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Contacts)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Finances)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Produitsservices)
                        .ThenInclude(p => p.Comodite)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Licencesrbqs)
                        .ThenInclude(l => l.SouscategorieLicencerbqs)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Brochures)
                .FirstOrDefaultAsync(u => u.UserId == userId);

            finance = user.Fournisseur.Finances.SingleOrDefault();            

            if (user != null)
            {
                //await sessionStorage.SetItemAsync("User", user);
                fournisseur = user.Fournisseur;
                if (fournisseur != null)
                {
                    mdp = user.Motsdepasses.SingleOrDefault();
                    etatCompte = fournisseur.EtatCompte.GetValueOrDefault();

                    neq = fournisseur.Neq;
                    nomEntreprise = fournisseur.NomEntreprise;
                    courrielEntreprise = fournisseur.CourrielEntreprise;

                    var address = fournisseur.Adresses.FirstOrDefault();
                    if (address != null)
                    {
                        numeroCiv = address.NumeroCivique;
                        rue = address.Rue;
                        var municipality = municipalites.FirstOrDefault(m => m.CodeMunicipalite == address.CodeMunicipalite);
                        ville = municipality?.NomMunicipalite ?? "Municipalité Inconnu";

                        var provinceObj = provinces.FirstOrDefault(p => p.CodeProvince == address.CodeProvince);
                        province = provinceObj?.NomProvince ?? "Province Inconnue";

                        if (address.CodeProvince != "4")
                        {
                            ville = address.NomMunicipalite;
                        }

                        codePostal = address.CodePostal;
                        numeroTelephone = address.NumTel;

                        if (municipality?.CodeTerritoireNavigation != null)
                        {
                            var regionAdminCode = municipality.CodeTerritoireNavigation.CodeRegionAdministrative;
                            var regionAdmin = regionAdministrativeList.FirstOrDefault(r => r.CodeRegionAdministrative == regionAdminCode);
                            regionAdministrative = regionAdmin?.NomRegionAmdin ?? "Région administrative Inconnue";
                        }

                        if (address.CodeProvince != "4")
                        {
                            regionAdministrative = "Hors du Québec";
                        }
                    }

                    finance = fournisseur.Finances.FirstOrDefault();
                    if (finance != null)
                    {
                        tvq = finance.Tvq;
                        tps = finance.Tps;
                        var condition = conditionPaiementList.FirstOrDefault(c => c.CodeConditionsPaiements == finance.CodeConditionPaiement);
                        conditionPaiement = condition?.NomConditionsPaiements ?? "Condition de paiement Inconnue";
                        devise = finance.Devise;
                        modeCom = finance.ModeCom;
                    }

                    rbqDetails = fournisseur.Licencesrbqs.ToList();
                    products = fournisseur.Produitsservices.ToList(); // This already includes Comodite
                    contacts = fournisseur.Contacts.ToList();
                    brochures = fournisseur.Brochures.ToList();

                    statut = fournisseur.EtatDemande;

                    //LOGIQUE POUR SHOW MODAL ETAT DEMANDE
                    if (statut == "Approuvée")
                    {
                        _showEtatDemande = false;
                    }
                    else
                    {
                        _showEtatDemande = true;
                    }

                    isLoading = false;
                    if (fournisseur.EtatCompte == true)
                    {
                        etat = "Activé";
                    }
                    else
                    {
                        etat = "Désactivé";
                        _showEtatDemande = true;
                    }
                }
                else
                {
                    // Gérer le cas où le fournisseur est nul
                    Console.WriteLine("Le fournisseur est null pour cet utilisateur.");
                    Navigation.NavigateTo("/erreur");
                    return;
                }
            }
            else
            {
                // Gérer le cas où l'utilisateur n'est pas trouvé
                Console.WriteLine("L'utilisateur n'est pas trouvé dans la base de données.");
                Navigation.NavigateTo("/erreur");
            }
        }
    }

    
}
