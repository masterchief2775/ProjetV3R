@page "/Connexion"
@page "/"
@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text

<PageTitle>Connexion</PageTitle>

<div class="container-fluid">
    <form class="form" @onsubmit="HandleSubmit">
        <div>
            <label for="identifiantInput" class="form-label">Identifiant</label>
            <input type="text" class="form-control" id="identifiantInput" @bind="identifiantInput">
            @if (!string.IsNullOrEmpty(identifiantError))
            {
                <div class="text-danger">@identifiantError</div>
            }
        </div>
        <div>
            <label for="mdpInput" class="form-label">Mot de passe</label>
            <input type="password" class="form-control" id="mdpInput" @bind="mdpInput">
            @if (!string.IsNullOrEmpty(mdpError))
            {
                <div class="text-danger">@mdpError</div>
            }
        </div>
        <button type="submit" class="btn btn-primary">Connexion</button>
    </form>
</div>

@code {
    private string identifiantInput = string.Empty;
    private string mdpInput = string.Empty;

    private string identifiantError = string.Empty;
    private string mdpError = string.Empty;

    private async Task HandleSubmit()
    {
        identifiantError = string.Empty;
        mdpError = string.Empty;

        var isValid = true;

        if (string.IsNullOrWhiteSpace(identifiantInput))
        {
            identifiantError = "Un identifiant est requis.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(mdpInput))
        {
            mdpError = "Un mot de passe est requis.";
            isValid = false;
        }

        if (isValid)
        {
            // Recherche dans la base de données pour trouver l'utilisateur avec cet identifiant
            var user = await dbContext.Users
                .Include(u => u.Motsdepasses)
                .FirstOrDefaultAsync(u => u.Identifiant == identifiantInput);

            if (user != null)
            {
                var encryptedPassword = ComputeMd5Hash(mdpInput);

                var mdpCorrespondant = user.Motsdepasses.FirstOrDefault(m => m.Mdp == encryptedPassword);

                if (mdpCorrespondant != null)
                {
                    // Connexion réussie
                    Navigation.NavigateTo("/formulaire");
                }
                else
                {
                    mdpError = "Mot de passe incorrect.";
                }
            }
            else
            {
                identifiantError = "Identifiant incorrect.";
            }
        }
    }

    private string ComputeMd5Hash(string input)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            // Convertir le tableau de bytes en une chaîne hexadécimale
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                sb.Append(hashBytes[i].ToString("x2"));
            }
            return sb.ToString();
        }
    }
}
