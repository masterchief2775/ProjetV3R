@page "/Connexion"
@page "/"

@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using IntegrationV3R_PortailFournisseur.Data.Models
@using IntegrationV3R_PortailFournisseur.Data.Services.Scoped

@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ApplicationDbContext _context

<PageTitle>Connexion</PageTitle>

<LoadingScreen IsLoading="isLoading" />  <!-- Add the LoadingScreen component -->
@if (showSuccessMessage)
{
    <div class="modal" style="display:block;">
        <div class="modal-boxSize">
            <div class="modal-content" style="display:block;">
                <span class="close mb-2" @onclick="CloseMessage">&times;</span>
                <h3>Le profil à été créé avec succès! </h3>
                <p class="mt-4">Vous devriez recevoir un courriel de confirmation sous peux.</p>
                <p>Merci de votre confiance !</p>
                
            </div>
        </div>        
    </div>
}
@if (showDeactivateMessage)
{
    <div class="modal" style="display:block;">
        <div class="modal-boxSize">
            <div class="modal-content" style="display:block;">
                <span class="close mb-2" @onclick="CloseDeactivateMessage">&times;</span>
                <h3>Le profile à été désactivé avec succès </h3>
                <p class="mt-4">*Pour le réactiver, veuillez vous connecter et le le réactiver dans le profil ou contacter la ville*</p>
                <p class="">Merci !</p>
                
            </div>
        </div>        
    </div>
}
<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="row w-100">
        <div class="col-md-6 col-lg-4 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header text-center">
                    <h4>Connexion</h4>
                </div>
                <div class="card-body">
                    <form class="form" @onsubmit="HandleSubmit">
                        <div class="mb-3">
                            <label for="identifiantInput" class="form-label">Identifiant</label>
                            <input type="text" class="form-control" id="identifiantInput" @bind="identifiantInput" />
                            @if (!string.IsNullOrEmpty(identifiantError))
                            {
                                <div class="text-danger">@identifiantError</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="mdpInput" class="form-label">Mot de passe</label>
                            <input type="password" class="form-control" id="mdpInput" @bind="mdpInput" />
                            @if (!string.IsNullOrEmpty(mdpError))
                            {
                                <div class="text-danger">@mdpError</div>
                            }
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Se connecter</button>
                            <button class="btn btn-secondary mx-2" @onclick="NavigateToFormulaireDemande">Formulaire Demande</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    private SendMailService mailService { get; set; }
    private string identifiantInput = string.Empty;
    private string mdpInput = string.Empty;

    private string identifiantError = string.Empty;
    private string mdpError = string.Empty;

    private bool isLoading = false;  // This controls the loading screen visibility

    private bool showSuccessMessage;
    private bool showDeactivateMessage;

    private bool _navigationHandled = false;


    protected override async void OnInitialized()
    {
        //mailService.SendMailConfirmCreate("Les meilleurs du quartier", "test@hihi.com", "");
        var uri = new Uri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("success", out var success) && success == "true")
        {
            showSuccessMessage = true;
        }        
        if(queryParams.TryGetValue("deactivate", out var deactivate) && deactivate == "true")
        {
            showDeactivateMessage = true; 
        }

        var userId = sessionStorage.GetItemAsync<int?>("UserId");

        if(await userId <= 0)
        {
            Console.WriteLine("NULL USER");
            await sessionStorage.SetItemAsync("UserId", -1);
        }

        if(await userId > 0)
        {
            Navigation.NavigateTo("/profil");
        }
    }

    private void CloseMessage()
    {
        showSuccessMessage = false;        
    }

    private void CloseDeactivateMessage()
    {
        showDeactivateMessage = false;        
    }

    private async Task HandleSubmit()
    {
        // Reset errors
        identifiantError = string.Empty;
        mdpError = string.Empty;

        if (string.IsNullOrWhiteSpace(identifiantInput))
        {
            identifiantError = "Un identifiant est requis.";
            return;
        }

        if (string.IsNullOrWhiteSpace(mdpInput))
        {
            mdpError = "Un mot de passe est requis.";
            return;
        }

        // Show loading screen while the authentication process is in progress
        isLoading = true;

        var hashedPassword = ComputeMd5Hash(mdpInput);

        var fournisseur =  _context.Fournisseurs.FirstOrDefault(f => f.Neq == identifiantInput || f.CourrielEntreprise == identifiantInput);       

        if (fournisseur != null)
        {
            var user = await _context.Users
            .Include(u => u.Motsdepasses)
            .FirstOrDefaultAsync(u => u.FournisseurId == fournisseur.FournisseurId);
            if (user != null)
            {
                var passwordEntry = user.Motsdepasses.FirstOrDefault(m => m.Mdp == hashedPassword);

                if (passwordEntry != null)
                {
                    // Connexion réussie : stocker l'ID utilisateur dans le stockage de session sécurisé
                    await sessionStorage.SetItemAsync("UserId", user.UserId);                    

                    // Enregistrement de la connexion après une authentification réussie
                    await EnregistrerConnexion(user.UserId);

                    // Redirection vers la page EtatDemande
                    Navigation.NavigateTo("/profil");
                }
                else
                {
                    mdpError = "Nom d'utilisateur ou mot de passe incorrect.";
                }
            }
            else
            {
                identifiantError = "Nom d'utilisateur ou mot de passe incorrect.";
            }
        }
        else
        {
            mdpError = "Nom d'utilisateur ou mot de passe incorrect.";
        }

        // Hide the loading screen after the process is complete
        isLoading = false;
    }

    private string ComputeMd5Hash(string input)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            // Convertir le tableau de bytes en une chaîne hexadécimale
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                sb.Append(hashBytes[i].ToString("x2"));
            }
            return sb.ToString();
        }
    }

    private async Task EnregistrerConnexion(int userId)
    {
        // Récupérer l'adresse IP du client
        var ipConnexion = HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();

        // Création d'une nouvelle instance de Connexion
        var nouvelleConnexion = new Connexion
            {
                UserId = userId,
                IpConnexion = ipConnexion ?? "IP inconnue", // S'il n'y a pas d'adresse IP, on met une valeur par défaut
                Timestamps = DateTime.Now
            };

        // Insertion de la nouvelle connexion dans la base de données
        _context.Connexions.Add(nouvelleConnexion);
        await _context.SaveChangesAsync();
    }

    private void NavigateToFormulaireDemande()
    {
        Navigation.NavigateTo("/formulaire");
        //UpdateFinancePageState(false);
    }

    
}
