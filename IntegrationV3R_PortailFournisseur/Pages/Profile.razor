@page "/profile"
@using IntegrationV3R_PortailFournisseur.Shared.ComposantsProfile
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject ApplicationDbContext dbContext
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Profil</PageTitle>

<LoadingScreen IsLoading="isLoading" />

<div class="container-fluid profile-container">
    <div class="row">
        <!-- Sidebar with Navigation -->
        <div class="col-md-3">
            <div class="nav flex-column nav-pills">
                <button class="btn btn-outline-primary mb-2 @((isIdentificationVisible ? "active" : ""))" @onclick="ShowIdentification">
                    Identification
                </button>
                <button class="btn btn-outline-primary mb-2 @((isAddressVisible ? "active" : ""))" @onclick="ShowAddress">
                    Adresse
                </button>
                <button class="btn btn-outline-primary mb-2 @((isRBQLicencesVisible ? "active" : ""))" @onclick="ShowRBQLicences">
                    Licence RBQ
                </button>
                <button class="btn btn-outline-primary mb-2 @((isFinancesVisible ? "active" : ""))" @onclick="ShowFinances">
                    Finances
                </button>
                <button class="btn btn-outline-primary mb-2 @((isContactsVisible ? "active" : ""))" @onclick="ShowContacts">
                    Contacts
                </button>
                <button class="btn btn-outline-primary mb-2 @((isProductsVisible ? "active" : ""))" @onclick="ShowProducts">
                    Produits
                </button>
            </div> <!-- nav-pills -->
        </div> <!-- col-md-3 -->
        <!-- Main Content Area -->
        <div class="col-md-9">
            @if (isIdentificationVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Identification</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileIdentification neq="@neq" nomEntreprise="@nomEntreprise" courrielEntreprise="@courrielEntreprise" />
                    </div>
                </div>
            }

            @if (isAddressVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Adresse</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileAdresse NumeroCiv="@numeroCiv" Rue="@rue" Ville="@ville" Province="@province" CodePostal="@codePostal" RegionAdministrative="@regionAdministrative" NumeroTelephone="@numeroTelephone" />
                    </div>
                </div>
            }

            @if (isRBQLicencesVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Licence RBQ</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileRBQ Licences="@rbqDetails" />
                    </div>
                </div>
            }

            @if (isFinancesVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Finances</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileFinances Tps="@tps" Tvq="@tvq" CodeConditionPaiement="@conditionPaiement" Devise="@devise" ModeCom="@modeCom" />
                    </div>
                </div>
            }

            @if (isContactsVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Contacts</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileContact Contacts="@contacts" />
                    </div>
                </div>
            }

            @if (isProductsVisible)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <strong>Produits</strong>
                    </div>
                    <div class="card-body">
                        <CompProfileProduit Products="@products" />
                    </div>
                </div>
            }
        </div> <!-- col-md-9 -->
    </div> <!-- row -->
</div> <!-- container-fluid -->
@code {
    private bool isUserAuthenticated = false;
    private Fournisseur fournisseur;
    private bool isLoading = false;

    [Parameter] public EventCallback<bool> BDFetched { get; set; }

    private string neq = "";
    private string nomEntreprise = "";
    private string courrielEntreprise = "";

    private bool isIdentificationVisible = true;
    private bool isAddressVisible = false;
    private bool isContactsVisible = false;
    private bool isProductsVisible = false;
    private bool isRBQLicencesVisible = false;
    private bool isFinancesVisible = false;

    private string numeroCiv = "";
    private string rue = "";
    private string ville = "";
    private string province = "";
    private string codePostal = "";
    private string regionAdministrative = "";
    private string numeroTelephone = "";

    public string tvq = "";
    public string tps = "";
    public string conditionPaiement = "";
    public string devise = "";
    public string modeCom = "";

    private List<Contact> contacts = new List<Contact>();
    private List<Produitsservice> products = new List<Produitsservice>();
    private List<Licencesrbq> rbqDetails = new List<Licencesrbq>();
    private List<Municipalite> municipalites = new List<Municipalite>();
    private List<Province> provinces = new List<Province>();

    private void ShowIdentification() { SetVisibility("Identification"); }
    private void ShowAddress() { SetVisibility("Address"); }
    private void ShowContacts() { SetVisibility("Contacts"); }
    private void ShowProducts() { SetVisibility("Products"); }
    private void ShowRBQLicences() { SetVisibility("RBQLicences"); }
    private void ShowFinances() { SetVisibility("Finances"); }

    private void SetVisibility(string section)
    {
        isIdentificationVisible = section == "Identification";
        isAddressVisible = section == "Address";
        isContactsVisible = section == "Contacts";
        isProductsVisible = section == "Products";
        isRBQLicencesVisible = section == "RBQLicences";
        isFinancesVisible = section == "Finances";
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        municipalites = await dbContext.Municipalites.Include(m => m.CodeTerritoireNavigation).ToListAsync();
        provinces = await dbContext.Provinces.ToListAsync();
        var regionAdministrativeList = await dbContext.Regionadministratives.ToListAsync();
        var conditionPaiementList = await dbContext.Conditionspaiements.ToListAsync();
        var sousCategories = await dbContext.SouscategorieLicencerbqs
                            .Include(s => s.IdSousCategorieNavigation)  // Ensure we include the navigation property to the subcategory
                            .ToListAsync();  // Fetching all subcategories

        var userId = await sessionStorage.GetItemAsync<int?>("UserId");

        if (userId == null) { Navigation.NavigateTo("/connexion"); }
        else
        {
            isUserAuthenticated = true;
            var user = await dbContext.Users
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Adresses)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Contacts)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Finances)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Produitsservices)
                        .ThenInclude(p => p.Comodite) // Including Comodite
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Licencesrbqs)
                        .ThenInclude(l => l.SouscategorieLicencerbqs) // Ensure SouscategorieLicencerbqs is included here
                .FirstOrDefaultAsync(u => u.UserId == userId);

            if (user != null)
            {
                fournisseur = user.Fournisseur;
                if (fournisseur != null)
                {
                    neq = fournisseur.Neq;
                    nomEntreprise = fournisseur.NomEntreprise;
                    courrielEntreprise = fournisseur.CourrielEntreprise;

                    var address = fournisseur.Adresses.FirstOrDefault();
                    if (address != null)
                    {
                        numeroCiv = address.NumeroCivique;
                        rue = address.Rue;
                        var municipality = municipalites.FirstOrDefault(m => m.CodeMunicipalite == address.CodeMunicipalite);
                        ville = municipality?.NomMunicipalite ?? "Municipalité Inconnu";

                        var provinceObj = provinces.FirstOrDefault(p => p.CodeProvince == address.CodeProvince);
                        province = provinceObj?.NomProvince ?? "Province Inconnue";

                        codePostal = address.CodePostal;
                        numeroTelephone = address.NumTel;

                        if (municipality?.CodeTerritoireNavigation != null)
                        {
                            var regionAdminCode = municipality.CodeTerritoireNavigation.CodeRegionAdministrative;
                            var regionAdmin = regionAdministrativeList.FirstOrDefault(r => r.CodeRegionAdministrative == regionAdminCode);
                            regionAdministrative = regionAdmin?.NomRegionAmdin ?? "Région administrative Inconnue";
                        }
                    }

                    var finance = fournisseur.Finances.FirstOrDefault();
                    if (finance != null)
                    {
                        tvq = finance.Tvq;
                        tps = finance.Tps;
                        var condition = conditionPaiementList.FirstOrDefault(c => c.CodeConditionsPaiements == finance.CodeConditionPaiement);
                        conditionPaiement = condition?.NomConditionsPaiements ?? "Condition de paiement Inconnue";
                        devise = finance.Devise;
                        modeCom = finance.ModeCom;
                    }

                    rbqDetails = fournisseur.Licencesrbqs.ToList();
                    products = fournisseur.Produitsservices.ToList(); // This already includes Comodite
                    contacts = fournisseur.Contacts.ToList();
                }
            }
        }

        isLoading = false;
    }


}
