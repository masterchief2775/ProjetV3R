@page "/profile"
@using IntegrationV3R_PortailFournisseur.Shared.ComposantsProfile
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject ApplicationDbContext dbContext
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Profil</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Sidebar with buttons on the left -->
        <div class="col-md-3">
            <div class="btn-group-vertical w-100">
                <button class="btn btn-primary mb-3" @onclick="ShowIdentification">
                    @if (isIdentificationVisible)
                    {
                        <text>--Identification--</text>
                    }
                    else
                    {
                        <text>Identification</text>
                    }
                </button>

                <button class="btn btn-primary mb-3" @onclick="ShowAddress">
                    @if (isAddressVisible)
                    {
                        <text>--Adresse--</text>
                    }
                    else
                    {
                        <text>Adresse</text>
                    }
                </button>

                <button class="btn btn-primary mb-3" @onclick="ShowRBQLicences">
                    @if (isRBQLicencesVisible)
                    {
                        <text>--Lisence RBQ--</text>
                    }
                    else
                    {
                        <text>Lisence RBQ</text>
                    }
                </button>

                <button class="btn btn-primary mb-3" @onclick="ShowFinances">
                    @if (isFinancesVisible)
                    {
                        <text>--Finances--</text>
                    }
                    else
                    {
                        <text>Finances</text>
                    }
                </button>

                <button class="btn btn-primary mb-3" @onclick="ShowContacts">
                    @if (isContactsVisible)
                    {
                        <text>--Contacts--</text>
                    }
                    else
                    {
                        <text>Contacts</text>
                    }
                </button>

                <button class="btn btn-primary mb-3" @onclick="ShowProducts">
                    @if (isProductsVisible)
                    {
                        <text>--Produits--</text>
                    }
                    else
                    {
                        <text>Produits</text>
                    }
                </button>
            </div> <!-- btn-group-vertical -->
        </div> <!-- col-md-3 -->
        <!-- Right column to display components -->
        <div class="col-md-9">
            <div class="content-panel">
                @if (isIdentificationVisible)
                {
                    <CompProfileIdentification neq="@neq"
                                           nomEntreprise="@nomEntreprise"
                                           courrielEntreprise="@courrielEntreprise" />
                }

                @if (isAddressVisible)
                {
                    <CompProfileAdresse NumeroCiv="@numeroCiv"
                                    Rue="@rue"
                                    Ville="@ville"
                                    Province="@province"
                                    CodePostal="@codePostal"
                                    RegionAdministrative="@regionAdministrative"
                                    NumeroTelephone="@numeroTelephone" />

                }

                @if (isRBQLicencesVisible)
                {
                    <CompProfileRBQ Licences="@rbqDetails" />
                }

                @if (isFinancesVisible)
                {
                    <CompProfileFinances Tps="@tps"
                                     Tvq="@tvq"
                                     CodeConditionPaiement="@conditionPaiement"
                                     Devise="@devise"
                                     ModeCom="@modeCom" />
                }

                @if (isContactsVisible)
                {
                    <CompProfileContact Contacts="@contacts" />
                }

                @if (isProductsVisible)
                {
                    <CompProfileProduit Products="@products" />
                }
            </div> <!-- content-panel -->
        </div> <!-- col-md-9 -->
    </div> <!-- row -->
</div> <!-- container-fluid -->
@code {
    private bool isUserAuthenticated = false;
    private Fournisseur fournisseur;

    [Parameter] public EventCallback<bool> BDFetched { get; set; }

    private string neq = "";
    private string nomEntreprise = "";
    private string courrielEntreprise = "";

    private bool isIdentificationVisible = true; // Identification is visible by default
    private bool isAddressVisible = false;
    private bool isContactsVisible = false;
    private bool isProductsVisible = false;
    private bool isRBQLicencesVisible = false;
    private bool isFinancesVisible = false;

    private string numeroCiv = "";
    private string rue = "";
    private string ville = "";
    private string province = "";
    private string codePostal = "";
    private string regionAdministrative = "";
    private string numeroTelephone = "";

    public string tvq = "";
    public string tps = "";
    public string conditionPaiement = "";
    public string devise = "";
    public string modeCom = "";

    private List<Contact> contacts = new List<Contact>();
    private List<Produitsservice> products = new List<Produitsservice>();
    private List<Licencesrbq> rbqDetails = new List<Licencesrbq>();
    private List<Municipalite> municipalites = new List<Municipalite>();
    private List<Province> provinces = new List<Province>();

    private void ShowIdentification()
    {
        // Show only identification and hide others
        isIdentificationVisible = true;
        isAddressVisible = false;
        isContactsVisible = false;
        isProductsVisible = false;
        isRBQLicencesVisible = false;
        isFinancesVisible = false;
    }

    private void ShowAddress()
    {
        // Show only address and hide others
        isIdentificationVisible = false;
        isAddressVisible = true;
        isContactsVisible = false;
        isProductsVisible = false;
        isRBQLicencesVisible = false;
        isFinancesVisible = false;
    }

    private void ShowContacts()
    {
        // Show only contacts and hide others
        isIdentificationVisible = false;
        isAddressVisible = false;
        isContactsVisible = true;
        isProductsVisible = false;
        isRBQLicencesVisible = false;
        isFinancesVisible = false;
    }

    private void ShowProducts()
    {
        // Show only products and hide others
        isIdentificationVisible = false;
        isAddressVisible = false;
        isContactsVisible = false;
        isProductsVisible = true;
        isRBQLicencesVisible = false;
        isFinancesVisible = false;
    }

    private void ShowRBQLicences()
    {
        // Show only RBQ Licenses and hide others
        isIdentificationVisible = false;
        isAddressVisible = false;
        isContactsVisible = false;
        isProductsVisible = false;
        isRBQLicencesVisible = true;
        isFinancesVisible = false;
    }

    private void ShowFinances()
    {
        // Show only finances and hide others
        isIdentificationVisible = false;
        isAddressVisible = false;
        isContactsVisible = false;
        isProductsVisible = false;
        isRBQLicencesVisible = false;
        isFinancesVisible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch the municipalites data from the database
        municipalites = await dbContext.Municipalites
            .Include(m => m.CodeTerritoireNavigation)  // Make sure you include the related 'Territoire'
            .ToListAsync();

        // Fetch the provinces data from the database
        provinces = await dbContext.Provinces.ToListAsync();

        var userId = await sessionStorage.GetItemAsync<int?>("UserId");

        if (userId == null)
        {
            Navigation.NavigateTo("/connexion");
        }
        else
        {
            isUserAuthenticated = true;
            var user = await dbContext.Users
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Adresses)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Contacts)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Finances)
                .Include(u => u.Fournisseur)
                    .ThenInclude(f => f.Produitsservices)
                .Include(u => u.Fournisseur) // Include RBQ entities
                    .ThenInclude(f => f.Licencesrbqs) // Assuming this is the navigation property
                .Include(u => u.Fournisseur)
                .FirstOrDefaultAsync(u => u.UserId == userId);

            if (user != null)
            {
                fournisseur = user.Fournisseur;
                if (fournisseur != null)
                {
                    // Set identification fields
                    neq = fournisseur.Neq;
                    nomEntreprise = fournisseur.NomEntreprise;
                    courrielEntreprise = fournisseur.CourrielEntreprise;

                    // Set address fields
                    var address = fournisseur.Adresses.FirstOrDefault();
                    if (address != null)
                    {
                        numeroCiv = address.NumeroCivique;
                        rue = address.Rue;

                        var municipality = municipalites.FirstOrDefault(m => m.CodeMunicipalite == address.CodeMunicipalite);
                        ville = municipality?.NomMunicipalite ?? "Municipalité Inconnu";

                        var provinceObj = provinces.FirstOrDefault(p => p.CodeProvince == address.CodeProvince);
                        province = provinceObj?.NomProvince ?? "Province Inconnue";

                        codePostal = address.CodePostal;
                        numeroTelephone = address.NumTel;

                        // Now, set RegionAdministrative
                        if (municipality?.CodeTerritoireNavigation != null)
                        {
                            // Get the RegionAdministrative name from the Territoire
                            regionAdministrative = municipality.CodeTerritoireNavigation.CodeRegionAdministrative ?? "Région administrative Inconnue";
                        }
                        else
                        {
                            regionAdministrative = "Territoire ou Région inconnus";
                        }
                    }

                    // Set finances fields
                    var finance = fournisseur.Finances.FirstOrDefault();
                    if (finance != null)
                    {
                        tvq = finance.Tvq;
                        tps = finance.Tps;
                        conditionPaiement = finance.CodeConditionPaiement;
                        devise = finance.Devise;
                        modeCom = finance.ModeCom;
                    }

                    // Fetch products/services
                    products = fournisseur.Produitsservices.ToList();

                    // Fetch RBQ details
                    rbqDetails = fournisseur.Licencesrbqs.ToList();

                    // Fetch contacts
                    contacts = fournisseur.Contacts.ToList();
                }
            }
        }
    }

}
