@using System.Text.RegularExpressions
@using IntegrationV3R_PortailFournisseur.Data.Services;
@using Microsoft.JSInterop

<div class="container-fluid mt-4">

    <form class="form" @onsubmit="HandleSubmit">
        <h5>Informations de l'entreprise</h5>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="nomEntrepriseInput" class="form-label">Nom de l'entreprise</label>
                <input type="text" class="form-control" id="nomEntrepriseInput" @bind="SingletonForm.NomEntrepriseInput" required>
                @if (!string.IsNullOrEmpty(nomEntrepriseError))
                {
                    <div class="text-danger">@nomEntrepriseError</div>
                }
            </div>

            <div class="col-md-3">
                <label for="neqInput" class="form-label">Numéro d'entreprise du Québec (NEQ)</label>
                <input type="text" class="form-control" id="neqInput" @bind="SingletonForm.NeqInput" required>
                @if (!string.IsNullOrEmpty(neqError))
                {
                    <div class="text-danger">@neqError</div>
                }
                <div id="neqHelp" class="form-text">
                    <a href="https://www.quebec.ca/entreprises-et-travailleurs-autonomes/demarrer-entreprise/immatriculer-constituer-entreprise/immatriculation-entreprise/numero-entreprise-quebec" target="_blank">En savoir plus sur le NEQ</a>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="emailInput" class="form-label">Adresse courriel</label>
                <input type="email" class="form-control" id="emailInput" @bind="SingletonForm.EmailInput" required>
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <div class="text-danger">@emailError</div>
                }
            </div>
        </div>

        <h5>Informations de connexion</h5>

        <div class="row mb-3">
            <div class="col-md-3">
                <label for="passwordInput" class="form-label">Mot de passe</label>
                <input type="password" class="form-control" id="passwordInput" @bind="SingletonForm.PasswordInput" required>
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <div class="text-danger">@passwordError</div>
                }
            </div>
            <div class="col-md-3">
                <label for="repeatPasswordInput" class="form-label">Répéter le mot de passe</label>
                <input type="password" class="form-control" id="repeatPasswordInput" @bind="SingletonForm.RepeatPasswordInput" required>
                @if (!string.IsNullOrEmpty(repeatPasswordError))
                {
                    <div class="text-danger">@repeatPasswordError</div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }
    private SingletonFormulaire SingletonForm => SingletonFormulaire.Instance;

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }   


    private string neqError = string.Empty;
    private string nomEntrepriseError = string.Empty;
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    private string repeatPasswordError = string.Empty;


    public void LoadSharedData()
    {
        neqInput = SharedData.NEQ;
        nomEntrepriseInput = SharedData.NomEntreprise;
        emailInput = SharedData.Courriel;

        StateHasChanged();
    }

    private void HandleSubmit()
    {
        // Reset errors
        ResetErrors();

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            LogToConsole();
            Checkpoint.InvokeAsync(1);
            OnPageSelected.InvokeAsync(1);
        }
    }

    //Submit called quand changement par la navbar. Peux aller ailleur que la prochaine page
    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            var formData = ExportFormData();
            LogToConsole(formData);            
            OnPageSelected.InvokeAsync(pageID);
            //Navigation.NavigateTo("/formulaireDemandeAdresse");
        }
    }

    private void ResetErrors()
    {
        neqError = string.Empty;
        nomEntrepriseError = string.Empty;
        emailError = string.Empty;
        passwordError = string.Empty;
        repeatPasswordError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        // Validation for NEQ
        if (string.IsNullOrWhiteSpace(SingletonForm.NeqInput))
        {
            neqError = "Le NEQ est requis.";
            isValid = false;
        }
        else if (!IsNumeric(SingletonForm.NeqInput) || SingletonForm.NeqInput.Length != 10 || !IsValidNEQFormat(SingletonForm.NeqInput))
        {
            neqError = "Le NEQ doit être un numéro de 10 chiffres commençant par 11, 22, 33 ou 88 et ayant le troisième caractère entre 4 et 9.";
            isValid = false;
        }

        // Validation for Nom de l'entreprise
        if (string.IsNullOrWhiteSpace(SingletonForm.NomEntrepriseInput) || SingletonForm.NomEntrepriseInput.Length > 64)
        {
            nomEntrepriseError = "Le nom de l'entreprise est requis et doit faire moins de 64 caractères.";
            isValid = false;
        }

        // Validation for Email
        if (string.IsNullOrWhiteSpace(SingletonForm.EmailInput) || SingletonForm.EmailInput.Length > 64 || !IsValidEmail(SingletonForm.EmailInput))
        {
            emailError = "Une adresse courriel valide de l'entreprise est requise et doit faire moins de 64 caractères.";
            isValid = false;
        }

        // Validation for Password
        if (string.IsNullOrWhiteSpace(SingletonForm.PasswordInput) || SingletonForm.PasswordInput.Length < 7 || SingletonForm.PasswordInput.Length > 12 ||
            !HasUpperCase(SingletonForm.PasswordInput) || !HasLowerCase(SingletonForm.PasswordInput) || !HasDigit(SingletonForm.PasswordInput) || !HasSpecialChar(SingletonForm.PasswordInput))
        {
            passwordError = "Le mot de passe doit contenir entre 7 et 12 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial.";
            isValid = false;
        }

        // Check if passwords match
        if (SingletonForm.PasswordInput != SingletonForm.RepeatPasswordInput)
        {
            repeatPasswordError = "Les mots de passe ne correspondent pas.";
            isValid = false;
        }

        return isValid;
    }

    private void LogToConsole()
    {
        Console.WriteLine($"Nom de l'entreprise: {SingletonForm.NomEntrepriseInput}");
        Console.WriteLine($"NEQ: {SingletonForm.NeqInput}");
        Console.WriteLine($"Email: {SingletonForm.EmailInput}");
        // Be cautious with logging sensitive data like passwords
        Console.WriteLine($"Mot de passe: {SingletonForm.PasswordInput}");
    }

    private bool IsValidEmail(string email)
    {
        return email.Contains("@") && email.Contains("."); // Simple check, can be improved
    }

    private bool IsNumeric(string input)
    {
        return input.All(char.IsDigit);
    }

    private bool IsValidNEQFormat(string neq)
    {
        return (neq.StartsWith("11") || neq.StartsWith("22") || neq.StartsWith("33") || neq.StartsWith("88")) &&
               (char.IsDigit(neq[2]) && "456789".Contains(neq[2]));
    }

    private bool HasUpperCase(string password)
    {
        return password.Any(char.IsUpper);
    }

    private bool HasLowerCase(string password)
    {
        return password.Any(char.IsLower);
    }

    private bool HasDigit(string password)
    {
        return password.Any(char.IsDigit);
    }

    private bool HasSpecialChar(string password)
    {
        var specialChars = "!@#$%^&*()_+-=[]{}|;':\",.<>?/`~";
        return password.Any(c => specialChars.Contains(c));
    }
}
