@using System.Text.RegularExpressions
@using IntegrationV3R_PortailFournisseur.Data.Services;
@using IntegrationV3R_PortailFournisseur.Data.Models;
@using Microsoft.JSInterop
@using System.Net
@using Microsoft.EntityFrameworkCore

@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext

<div class="container-fluid mt-4">

    <form class="form" @onsubmit="HandleSubmit">
        <h5>Informations de l'entreprise</h5>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="nomEntrepriseInput" class="form-label">Nom de l'entreprise*</label>
                <input type="text" class="form-control" id="nomEntrepriseInput" @bind="SingletonForm.NomEntrepriseInput">
                @if (!string.IsNullOrEmpty(nomEntrepriseError))
                {
                    <div class="text-danger">@nomEntrepriseError</div>
                }
            </div>

            <div class="col-md-3">
                <label for="neqInput" class="form-label">Numéro d'entreprise du Québec (NEQ)</label>
                <input type="text" class="form-control" id="neqInput" @bind="SingletonForm.NeqInput">
                @if (!string.IsNullOrEmpty(neqError))
                {
                    <div class="text-danger">@neqError</div>
                }
                <div id="neqHelp" class="form-text">
                    <a href="https://www.quebec.ca/entreprises-et-travailleurs-autonomes/demarrer-entreprise/immatriculer-constituer-entreprise/immatriculation-entreprise/numero-entreprise-quebec" target="_blank">En savoir plus sur le NEQ</a>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="emailInput" class="form-label">Adresse courriel*</label>
                <input type="text" class="form-control" id="emailInput" @bind="SingletonForm.EmailInput">
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <div class="text-danger">@emailError</div>
                }
            </div>
        </div>

        <h5>Informations de connexion</h5>

        <div class="row mb-3">
            <div class="col-md-3">
                <label for="passwordInput" class="form-label">Mot de passe*</label>
                <input type="password" class="form-control" id="passwordInput" @bind="SingletonForm.PasswordInput">
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <div class="text-danger">@passwordError</div>
                }
            </div>
            <div class="col-md-3">
                <label for="repeatPasswordInput" class="form-label">Répéter le mot de passe*</label>
                <input type="password" class="form-control" id="repeatPasswordInput" @bind="SingletonForm.RepeatPasswordInput">
                @if (!string.IsNullOrEmpty(repeatPasswordError))
                {
                    <div class="text-danger">@repeatPasswordError</div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }  

    [Inject] private SingletonFormulaire SingletonForm { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }

    [Parameter]
    public int? userid { get; set; } = null;

    private string neqInput = string.Empty;
    private string nomEntrepriseInput = string.Empty;
    private string emailInput = string.Empty;
    private string passwordInput = string.Empty;
    private string repeatPasswordInput = string.Empty;

    private string neqError = string.Empty;
    private string nomEntrepriseError = string.Empty;
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    private string repeatPasswordError = string.Empty;

    private List<Fournisseur> currentFournisseurs = new List<Fournisseur>();
    private Fournisseur connectedFournisseur;


    public void LoadSharedData()
    {
        SingletonForm.NeqInput = SharedData.NEQ;
        SingletonForm.NomEntrepriseInput = SharedData.NomEntreprise;
        SingletonForm.EmailInput = SharedData.Courriel;

        StateHasChanged();
    }

    public async Task FetchDataDB()
    {
        try
        {
            // Appel à la base de données pour récupérer les régions
            currentFournisseurs = await dbContext.Fournisseurs.ToListAsync();

        }
        catch (Exception ex)
        {
            emailError = "Erreur lors de la récupération à la BD, veuillez réessayer";
            Console.WriteLine(ex.Message);
        }

        if(userid != null)
        {
            connectedFournisseur = dbContext.Users
                .Where(u => u.UserId == userid)
                .Select(u => u.Fournisseur)
                .FirstOrDefault();
        }

        await BDFetched.InvokeAsync(true);       
    }


    private void HandleSubmit()
    {
        // Reset errors
        ResetErrors();

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            LogToConsole();
            Checkpoint.InvokeAsync(1);
            OnPageSelected.InvokeAsync(1);
        }
    }

    //Submit called quand changement par la navbar. Peux aller ailleur que la prochaine page
    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {            
            LogToConsole();            
            OnPageSelected.InvokeAsync(pageID);
            //Navigation.NavigateTo("/formulaireDemandeAdresse");
        }
    }

    private void ResetErrors()
    {
        neqError = string.Empty;
        nomEntrepriseError = string.Empty;
        emailError = string.Empty;
        passwordError = string.Empty;
        repeatPasswordError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        // Validation for NEQ      
        if(!string.IsNullOrWhiteSpace(SingletonForm.NeqInput))
        {
            if (!IsNumeric(SingletonForm.NeqInput) || SingletonForm.NeqInput.Length != 10 || !IsValidNEQFormat(SingletonForm.NeqInput))
            {
                neqError = "Le NEQ doit être un numéro de 10 chiffres commençant par 11, 22, 33 ou 88.";
                isValid = false;
            }
            else
            {
                foreach(Fournisseur fournisseur in currentFournisseurs)
                {
                    if(fournisseur.Neq == SingletonForm.NeqInput && fournisseur.Neq != connectedFournisseur.Neq )
                    {
                        neqError = "Ce NEQ est déjà inscrit dans la liste de fournisseurs pour" + fournisseur.NomEntreprise + ". Veulliez confirmer qu'il est bien écrit";
                        isValid = false;
                    }
                }
            }
        }        

        // Validation for Nom de l'entreprise
        if (string.IsNullOrWhiteSpace(SingletonForm.NomEntrepriseInput))
        {
            nomEntrepriseError = "Le nom de l'entreprise est requis.";
            isValid = false;
        }
        else if (SingletonForm.NomEntrepriseInput.Length > 64)
        {
            nomEntrepriseError = "Le nom de l'entreprise doit faire moins de 64 caractères.";
            isValid = false;
        }
        else
        {
            foreach (Fournisseur fournisseur in currentFournisseurs)
            {
                if (fournisseur.NomEntreprise == SingletonForm.NomEntrepriseInput && fournisseur.NomEntreprise != connectedFournisseur.NomEntreprise)
                {
                    nomEntrepriseError = "Ce nom est déjà inscrit dans la liste de fournisseurs. Veulliez confirmer qu'il est bien écrit";
                    isValid = false;
                }
            }
        }


        // Validation for Email
        if (string.IsNullOrWhiteSpace(SingletonForm.EmailInput))
        {
            emailError = "Une adresse courriel est requise.";
            isValid = false;
        }
        else if (SingletonForm.EmailInput.Length > 64 || !IsValidEmail(SingletonForm.EmailInput))
        {
            emailError = "L'adresse courriel doit être valide et faire moins de 64 caractères.";
            isValid = false;
        }        
        else
        {
            foreach (Fournisseur fournisseur in currentFournisseurs)
            {
                if (fournisseur.CourrielEntreprise == SingletonForm.EmailInput && fournisseur.CourrielEntreprise != connectedFournisseur.CourrielEntreprise)
                {
                    emailError = "Ce courriel est déjà inscrit dans la liste de fournisseurs pour " + fournisseur.NomEntreprise + ". Veulliez confirmer qu'il est bien écrit";
                    isValid = false;
                }
            }
        }

        // Validation for Password
        if(userid == null)
        {
            if (SingletonForm.PasswordInput == string.Empty)
            {
                passwordError = "Un mot de passe est requis";
                isValid = false;
            }
            else if (string.IsNullOrWhiteSpace(SingletonForm.PasswordInput) || SingletonForm.PasswordInput.Length < 7 || SingletonForm.PasswordInput.Length > 12 ||
                !HasUpperCase(SingletonForm.PasswordInput) || !HasLowerCase(SingletonForm.PasswordInput) || !HasDigit(SingletonForm.PasswordInput) || !HasSpecialChar(SingletonForm.PasswordInput))
            {
                passwordError = "Le mot de passe doit contenir entre 7 et 12 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial.";
                isValid = false;
            }

            // Check if passwords match
            if (SingletonForm.PasswordInput != SingletonForm.RepeatPasswordInput)
            {
                repeatPasswordError = "Les mots de passe ne correspondent pas.";
                isValid = false;
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(SingletonForm.PasswordInput))
            {
                if (SingletonForm.PasswordInput.Length < 7 || SingletonForm.PasswordInput.Length > 12 || !HasUpperCase(SingletonForm.PasswordInput) ||
                !HasLowerCase(SingletonForm.PasswordInput) || !HasDigit(SingletonForm.PasswordInput) || !HasSpecialChar(SingletonForm.PasswordInput))
                {
                    passwordError = "Le mot de passe doit contenir entre 7 et 12 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial.";
                    isValid = false;
                }

                // Check if passwords match
                if (SingletonForm.PasswordInput != SingletonForm.RepeatPasswordInput)
                {
                    repeatPasswordError = "Les mots de passe ne correspondent pas.";
                    isValid = false;
                }
            }
        }


        return isValid;
    }

    private void LogToConsole()
    {
        Console.WriteLine($"Nom de l'entreprise: {SingletonForm.NomEntrepriseInput}");
        Console.WriteLine($"NEQ: {SingletonForm.NeqInput}");
        Console.WriteLine($"Email: {SingletonForm.EmailInput}");
        // Be cautious with logging sensitive data like passwords
        Console.WriteLine($"Mot de passe: {SingletonForm.PasswordInput}");
    }

    private bool IsValidEmail(string email)
    {
        string trimmedMail = email.Trim();

        if (trimmedMail.Contains("@") && trimmedMail.Contains(".") && !trimmedMail.Contains(" ") && !trimmedMail.EndsWith("."))
        {
            //CONFIRME QUE LA SYNTAXE DU COURRIEL EST VALIDE
            try
            {
                var testAddress = new System.Net.Mail.MailAddress(trimmedMail);
                return testAddress.Address == trimmedMail;
            }
            catch
            {
                return false;
            }
        }
        else
        {
            return false;
        }

        //return email.Contains("@") && email.Contains("."); // Simple check, can be improved
    }

    /* NE FONCTIONNE PAS COMME PRÉVUE ****** VA dire que edu.cegeptr.qc.ca n'est pas valide. Il faudrait une banque de  
    private bool isValidDNS(string email)
    {
        //VERIFIE SI LE DOMAINE DU COURRIEL EST VALIDE
        var domain = email.Split('@')[1]; 
        try
        {            
            var hostEntry = Dns.GetHostEntry(domain);
            return hostEntry.AddressList.Length > 0;
        }
        catch
        {
            return false; 
        }
    }*/

    private bool IsNumeric(string input)
    {
        return input.All(char.IsDigit);
    }

    private bool IsValidNEQFormat(string neq)
    {
        return (neq.StartsWith("11") || neq.StartsWith("22") || neq.StartsWith("33") || neq.StartsWith("88"));
    }

    private bool HasUpperCase(string password)
    {
        return password.Any(char.IsUpper);
    }

    private bool HasLowerCase(string password)
    {
        return password.Any(char.IsLower);
    }

    private bool HasDigit(string password)
    {
        return password.Any(char.IsDigit);
    }

    private bool HasSpecialChar(string password)
    {
        var specialChars = "!@#$%^&*()_+-=[]{}|;':\",.<>?/`~";
        return password.Any(c => specialChars.Contains(c));
    }
}
