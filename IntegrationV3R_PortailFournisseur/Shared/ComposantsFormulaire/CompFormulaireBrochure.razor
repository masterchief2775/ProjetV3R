@using System.Text.RegularExpressions
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <h3>Insérez vos fichiers</h3>

    @if (!string.IsNullOrEmpty(fileError))
    {
        <div class="text-danger">@fileError</div>
    }

    <form class="form">
        <div class="mb-3">
            <label for="brochureInput" class="form-label">Brochure (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="brochureInput" OnChange="@(async e => await HandleBrochureUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="carteVisiteInput" class="form-label">Carte de visite (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="carteVisiteInput" OnChange="@(async e => await HandleCarteVisiteUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        @if (uploadedFiles.Any())
        {
            <h5>Fichiers téléchargés</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Nom du fichier</th>
                        <th>Taille (Mo)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in uploadedFiles)
                    {
                        <tr>
                            <td>@file.Name</td>
                            <td>@String.Format("{0:F3}", file.Size / (1024.0 * 1024.0))</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div>Aucun fichier téléchargé.</div>
        }

        <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Soumettre</button>
    </form>
</div>

@code {
    private List<UploadedFile> uploadedFiles = new();
    private string fileError = string.Empty;
    private bool brochureUploaded = false;  // Track if a brochure has been uploaded
    private bool carteVisiteUploaded = false; // Track if a business card has been uploaded

    private async Task HandleBrochureUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUpload(e, "Brochure", true);
    }

    private async Task HandleCarteVisiteUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUpload(e, "Carte de visite", false);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e, string fileType, bool isBrochure)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            // Validate file type
            if (!IsValidFileType(file.ContentType))
            {
                fileError = $"Type de fichier non valide pour {fileType}. Veuillez sélectionner des fichiers doc, docx, pdf, jpg, jpeg, ou png.";
                return;
            }

            // Validate file size
            if (file.Size > 75 * 1024 * 1024)
            {
                fileError = $"{fileType} doit être inférieur à 75 Mo.";
                return;
            }

            // Check if we need to update the existing file in the list
            var existingFile = uploadedFiles.FirstOrDefault(f => (isBrochure && f.Type == "Brochure") || (!isBrochure && f.Type == "Carte de visite"));

            if (existingFile != null)
            {
                // Update the existing file
                existingFile.Name = file.Name;
                existingFile.Size = file.Size;
            }
            else
            {
                // Add new file to the list
                uploadedFiles.Add(new UploadedFile { Name = file.Name, Size = file.Size, Type = isBrochure ? "Brochure" : "Carte de visite" });
            }

            // Mark as uploaded
            if (isBrochure)
            {
                brochureUploaded = true;
            }
            else
            {
                carteVisiteUploaded = true;
            }
        }
    }

    private bool IsValidFileType(string contentType)
    {
        return contentType switch
        {
            "application/pdf" => true,
            "application/msword" => true,
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => true,
            "image/jpeg" => true,
            "image/png" => true,
            _ => false,
        };
    }

    private void HandleSubmit()
    {
        if (!uploadedFiles.Any())
        {
            fileError = "Veuillez sélectionner au moins un fichier.";
            return;
        }

        // You can add processing logic here after the files are validated.
    }

    private class UploadedFile
    {
        public string Name { get; set; }
        public long Size { get; set; } // Size in bytes
        public string Type { get; set; } // Type of file: Brochure or Carte de visite
    }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }
}
