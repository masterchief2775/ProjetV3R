@page "/upload"
@using Microsoft.AspNetCore.Components.Forms

<h3>Uploader vos fichiers</h3>

@if (!string.IsNullOrEmpty(fileError))
{
    <p class="text-danger">@fileError</p>
}

<div>
    <h4>Brochure</h4>
    <InputFile OnChange="@(async e => await HandleBrochureUpload(e))" />
</div>
<div>
    <h4>Carte de visite</h4>
    <InputFile OnChange="@(async e => await HandleCarteVisiteUpload(e))" />
</div>

@if (uploadedFiles.Any())
{
    <h4>Fichiers téléchargés:</h4>
    <ul>
        @foreach (var file in uploadedFiles)
        {
            <li>@file.Name (@file.Size / 1024 / 1024) MB</li>
        }
    </ul>
}

@code {
    private List<UploadedFile> uploadedFiles = new();
    private string fileError = string.Empty;

    private async Task HandleBrochureUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUpload(e, "Brochure");
    }

    private async Task HandleCarteVisiteUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUpload(e, "Carte de visite");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e, string fileType)
    {
        long totalSize = 0;
        foreach (var file in e.GetMultipleFiles())
        {
            // Valider le type de fichier
            if (!IsValidFileType(file.ContentType))
            {
                fileError = $"Type de fichier non valide pour {fileType}. Veuillez sélectionner des fichiers doc, docx, pdf, jpg, jpeg, ou png.";
                return;
            }

            // Valider la taille du fichier
            if (file.Size > 75 * 1024 * 1024)
            {
                fileError = $"{fileType} doit être inférieur à 75 Mo.";
                return;
            }

            // Ajouter le fichier à la liste des fichiers uploadés
            uploadedFiles.Add(new UploadedFile { Name = file.Name, Size = file.Size });
        }
    }

    private bool IsValidFileType(string contentType)
    {
        return contentType switch
        {
            "application/pdf" => true,
            "application/msword" => true,
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => true,
            "image/jpeg" => true,
            "image/png" => true,
            _ => false,
        };
    }

    private class UploadedFile
    {
        public string Name { get; set; }
        public long Size { get; set; }
    }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }
}