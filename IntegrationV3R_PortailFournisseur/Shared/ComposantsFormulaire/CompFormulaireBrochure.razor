﻿@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using System.IO
@using IntegrationV3R_PortailFournisseur.Data.Models;


@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment



<div class="container-fluid mt-4">
    <h3>Insérez vos fichiers</h3>

    @if (!string.IsNullOrEmpty(fileError))
    {
        <div class="text-danger">@fileError</div>
    }

    <form class="form">
        <div class="mb-3">
            <label for="brochureInput" class="form-label">Brochure (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="brochureInput" OnChange="@(async e => await HandleBrochureUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="carteVisiteInput" class="form-label">Carte de visite (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="carteVisiteInput" OnChange="@(async e => await HandleCarteVisiteUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        <h5>Fichiers téléchargés</h5>
        @if (SingletonForm.SelectedBrochure != null || SingletonForm.SelectedCarteAffaire != null)
        {            
            <table class="table">
                <thead>
                    <tr>
                        <th>Nom du fichier</th>
                        <th>Taille (Mo)</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!string.IsNullOrEmpty(SingletonForm.SelectedBrochure.NomFichier))
                    {
                        <tr>
                            <td><strong>Brochure :</strong> @SingletonForm.OriginalBrochureName</td>
                            <td>@String.Format("{0:F2}", SingletonForm.SelectedBrochure.Taille / (1024.0 * 1024.0))</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>Aucune brochure choisie</td>            
                            <td> - </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(SingletonForm.SelectedCarteAffaire.NomFichier))
                    {
                        <tr>
                            <td><strong>Carte d'affaire :</strong> @SingletonForm.OriginalCarteAffaireName</td>
                            <td>@String.Format("{0:F2}", SingletonForm.SelectedCarteAffaire.Taille / (1024.0 * 1024.0))</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>Aucune carte d'affaire choisie</td>
                            <td> - </td>
                        </tr>
                    }

                </tbody>
            </table>
        }
        else
        {
            <h6>Aucun fichier téléchargé.</h6>
        }

        <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Suivant</button>
    </form>    
</div>

@code {
    [Parameter]
    public string NomEntrepriseInput { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    [Parameter]
    public EventCallback Confirmation { get; set; }

    [Parameter]
    public EventCallback<bool> _isModifValid { get; set; }

    [Parameter]
    public bool _isUserAccepted { get; set; }

    [Parameter]
    public bool _isCreation { get; set; }

    [Inject] private SingletonFormulaire SingletonForm { get; set; }




    //private List<IBrowserFile> uploadedFiles = new();
    private string fileError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _isCreation = SingletonForm._isCreationForm;
    }

    private bool IsValidFileType(string contentType)
    {
        return contentType switch
        {
            "application/pdf" => true,
            "application/msword" => true,
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => true,
            "image/jpeg" => true,
            "image/png" => true,
            _ => false,
        };
    }

    private long currentUploadSize = 0;
    private long uploadLimit = 75000000;

    private Task HandleBrochureUpload(InputFileChangeEventArgs e)
    {       
        currentUploadSize += e.File.Size;

        if(currentUploadSize < uploadLimit)
        {
            SingletonForm.OriginalBrochureName = e.File.Name;
            SingletonForm.BrochureFile = e.File;

            // Récupération de l'extension du fichier pour la brochure
            var brochureExtension = Path.GetExtension(SingletonForm.BrochureFile.Name);
            var brochureFileName = $"Brochure_{SingletonForm.NomEntrepriseInput}{brochureExtension}";
            var brochurePath = Path.Combine("wwwroot/uploads", brochureFileName);

            Brochure _brochure = new Brochure();
            _brochure.NomFichier = brochureFileName;
            _brochure.TypeFichier = brochureExtension;
            _brochure.NoFichier = "Brochure";
            _brochure.Taille = (int)SingletonForm.BrochureFile.Size;
            _brochure.LienDocument = brochurePath;
            SingletonForm.SelectedBrochure = _brochure;

            // Confirmation de l'upload avec les nouveaux noms de fichiers

            //uploadedFiles.Add(SingletonForm.BrochureFile);
        }
        else
        {
            fileError = "Les deux fichiers ne doivent pas dépasser 75mo combinés";
            currentUploadSize -= e.File.Size;
        }

        return Task.CompletedTask;
    }

    private Task HandleCarteVisiteUpload(InputFileChangeEventArgs e)
    {
        currentUploadSize += e.File.Size;

        if(currentUploadSize < uploadLimit)
        {
            SingletonForm.OriginalCarteAffaireName = e.File.Name;
            SingletonForm.CarteVisiteFile = e.File;

            // Récupération de l'extension du fichier pour la carte de visite
            var carteVisiteExtension = Path.GetExtension(SingletonForm.CarteVisiteFile.Name);
            var carteVisiteFileName = $"CarteAffaire_{SingletonForm.NomEntrepriseInput}{carteVisiteExtension}";
            var carteVisitePath = Path.Combine("wwwroot/uploads", carteVisiteFileName);

            Brochure _carteVisite = new Brochure();
            _carteVisite.NomFichier = carteVisiteFileName;
            _carteVisite.TypeFichier = carteVisiteExtension;
            _carteVisite.NoFichier = "Carte Affaire";
            _carteVisite.Taille = (int)SingletonForm.CarteVisiteFile.Size;
            _carteVisite.LienDocument = carteVisitePath;
            SingletonForm.SelectedCarteAffaire = _carteVisite; 

            //uploadedFiles.Add(SingletonForm.CarteVisiteFile);
        }
        else
        {
            fileError = "Les deux fichiers ne doivent pas dépasser 75mo combinés";
            currentUploadSize -= e.File.Size;
        }

        return Task.CompletedTask;
    }

    private async Task HandleSubmit()
    {


        if (fileError == string.Empty)
        {
            SingletonForm.UploadDirectory = Path.Combine(Environment.WebRootPath, "uploads");
            if (!Directory.Exists(SingletonForm.UploadDirectory))
            {
                Directory.CreateDirectory(SingletonForm.UploadDirectory);
            }

            if (_isCreation || (!_isCreation && !_isUserAccepted))
            {
                await Confirmation.InvokeAsync();
            }

            else
            {
                await Checkpoint.InvokeAsync(6);
                await OnPageSelected.InvokeAsync(6);
            }
        }

    }

    public async Task HandleSubmitReturn(int pageID)
    {    
        if (fileError == string.Empty)
        {
            await _isModifValid.InvokeAsync(true);
            await OnPageSelected.InvokeAsync(pageID);
        }
    }

}