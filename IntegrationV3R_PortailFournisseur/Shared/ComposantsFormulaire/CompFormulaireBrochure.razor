@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using System.IO

@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment

<div class="container-fluid mt-4">
    <h3>Insérez vos fichiers</h3>

    @if (!string.IsNullOrEmpty(fileError))
    {
        <div class="text-danger">@fileError</div>
    }

    <form class="form">
        <div class="mb-3">
            <label for="brochureInput" class="form-label">Brochure (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="brochureInput" OnChange="@(async e => await HandleBrochureUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="carteVisiteInput" class="form-label">Carte de visite (doc, docx, pdf, jpg, jpeg, png, max 75 MB)</label>
            <InputFile id="carteVisiteInput" OnChange="@(async e => await HandleCarteVisiteUpload(e))" accept=".doc,.docx,.pdf,.jpg,.jpeg,.png" class="form-control" />
        </div>

        @if (uploadedFiles.Any())
        {
            <h5>Fichiers téléchargés</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Nom du fichier</th>
                        <th>Taille (Mo)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in uploadedFiles)
                    {
                        <tr>
                            <td>@file.Name</td>
                            <td>@String.Format("{0:F3}", file.Size / (1024.0 * 1024.0))</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div>Aucun fichier téléchargé.</div>
        }

        <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Soumettre</button>
    </form>
</div>

@code {
    [Parameter]
    public string NomEntreprise { get; set; } // Nom de l'entreprise passé en paramètre

    private IBrowserFile brochureFile;
    private IBrowserFile carteVisiteFile;
    private List<IBrowserFile> uploadedFiles = new();
    private string fileError = string.Empty;

    private bool IsValidFileType(string contentType)
    {
        return contentType switch
        {
            "application/pdf" => true,
            "application/msword" => true,
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => true,
            "image/jpeg" => true,
            "image/png" => true,
            _ => false,
        };
    }

    private async Task HandleBrochureUpload(InputFileChangeEventArgs e)
    {
        brochureFile = e.File;
    }

    private async Task HandleCarteVisiteUpload(InputFileChangeEventArgs e)
    {
        carteVisiteFile = e.File;
    }

    private async Task HandleSubmit()
    {
        if (brochureFile != null && carteVisiteFile != null)
        {

            var uploadDirectory = Path.Combine(Environment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadDirectory))
            {
                Directory.CreateDirectory(uploadDirectory);
            }

            // Récupération de l'extension du fichier pour la brochure
            var brochureExtension = Path.GetExtension(brochureFile.Name);
            var brochureFileName = $"Brochure_{NomEntreprise}{brochureExtension}";
            var brochurePath = Path.Combine(uploadDirectory, brochureFileName);
            using (var stream = new FileStream(brochurePath, FileMode.Create))
            {
                await brochureFile.OpenReadStream(75000000).CopyToAsync(stream);
            }

            // Récupération de l'extension du fichier pour la carte de visite
            var carteVisiteExtension = Path.GetExtension(carteVisiteFile.Name);
            var carteVisiteFileName = $"CarteAffaire_{NomEntreprise}{carteVisiteExtension}";
            var carteVisitePath = Path.Combine(uploadDirectory, carteVisiteFileName);
            using (var stream = new FileStream(carteVisitePath, FileMode.Create))
            {
                await carteVisiteFile.OpenReadStream(75000000).CopyToAsync(stream);
            }

            // Confirmation de l'upload avec les nouveaux noms de fichiers
            fileError = null;
            uploadedFiles.Add(brochureFile);
            uploadedFiles.Add(carteVisiteFile);
        }
        else
        {
            fileError = "Veuillez sélectionner les deux fichiers avant de soumettre le formulaire.";
        }
    }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }
}
