@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

<div class="container-fluid mt-4">

    <form class="form" @onsubmit="HandleSubmit">
        <h5>Finances</h5>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tpsInput" class="form-label">Numéro de TPS</label>
                <input type="text" class="form-control" id="tpsInput" @bind="SingletonForm.TpsInput">
                @if (!string.IsNullOrEmpty(tpsError))
                {
                    <div class="text-danger">@tpsError</div>
                }
            </div>

            <div class="col-md-6">
                <label for="tvqInput" class="form-label">Numéro de TVQ</label>
                <input type="text" class="form-control" id="tvqInput" @bind="SingletonForm.TvqInput">
                @if (!string.IsNullOrEmpty(tvqError))
                {
                    <div class="text-danger">@tvqError</div>
                }
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="conditionsPaiement" class="form-label">Conditions de paiement</label>
                <select class="form-select" id="conditionsPaiement" @bind="SingletonForm.ConditionsPaiement">
                    <option value="Dans les 30 jours sans déduction">Dans les 30 jours sans déduction</option>
                    <option value="Dans les 60 jours sans déduction">Dans les 60 jours sans déduction</option>
                    <!-- Add other options as needed -->
                </select>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <fieldset>
                    <legend>Devise</legend>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="cad" name="currency" value="CAD" @bind="SingletonForm.Currency">
                        <label class="form-check-label" for="cad">CAD – Dollar canadien</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="usd" name="currency" value="USD" @bind="SingletonForm.Currency">
                        <label class="form-check-label" for="usd">USD – Dollar des États-Unis</label>
                    </div>
                </fieldset>
            </div>

            <div class="col-md-6">
                <fieldset>
                    <legend>Mode de communication</legend>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="email" name="communicationMode" value="Courriel" @bind="SingletonForm.CommunicationMode">
                        <label class="form-check-label" for="email">Courriel</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="courier" name="communicationMode" value="Courrier régulier" @bind="SingletonForm.CommunicationMode">
                        <label class="form-check-label" for="courier">Courrier régulier</label>
                    </div>
                </fieldset>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }
    private SingletonFormulaire SingletonForm => SingletonFormulaire.Instance;

    private string tpsError = string.Empty;
    private string tvqError = string.Empty;

    private void HandleSubmit()
    {
        // Reset errors
        tpsError = string.Empty;
        tvqError = string.Empty;

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            LogToConsole();
        }
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        // Validation for TPS (if any required format, e.g., numeric)
        if (!string.IsNullOrWhiteSpace(SingletonForm.TpsInput) && !IsNumeric(SingletonForm.TpsInput))
        {
            tpsError = "Le numéro de TPS doit être numérique.";
            isValid = false;
        }

        // Validation for TVQ (if any required format, e.g., numeric)
        if (!string.IsNullOrWhiteSpace(SingletonForm.TvqInput) && !IsNumeric(SingletonForm.TvqInput))
        {
            tvqError = "Le numéro de TVQ doit être numérique.";
            isValid = false;
        }

        return isValid;
    }

    private void LogToConsole()
    {
        Console.WriteLine($"Numéro de TPS: {SingletonForm.TpsInput}");
        Console.WriteLine($"Numéro de TVQ: {SingletonForm.TvqInput}");
        Console.WriteLine($"Conditions de paiement: {SingletonForm.ConditionsPaiement}");
        Console.WriteLine($"Devise: {SingletonForm.Currency}");
        Console.WriteLine($"Mode de communication: {SingletonForm.CommunicationMode}");
    }

    private bool IsNumeric(string input)
    {
        return input.All(char.IsDigit);
    }
}
