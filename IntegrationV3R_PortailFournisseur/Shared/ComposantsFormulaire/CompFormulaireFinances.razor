@using IntegrationV3R_PortailFournisseur.Shared.ComposantsProfile
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject IServiceScopeFactory ScopeFactory
@inject ApplicationDbContext dbContext

<div class="container mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <h5 class="mb-4">Finances</h5>

        <div class="row g-3">
            <div class="col-md-6">
                <label for="tpsInput" class="form-label">Numéro de TPS</label>
                <input type="text" class="form-control" id="tpsInput" @bind="SingletonForm.TpsInput" placeholder="Entrez le numéro de TPS">
                @if (!string.IsNullOrEmpty(tpsError))
                {
                    <div class="text-danger mt-1 small">@tpsError</div>
                }
            </div>

            <div class="col-md-6">
                <label for="tvqInput" class="form-label">Numéro de TVQ</label>
                <input type="text" class="form-control" id="tvqInput" @bind="SingletonForm.TvqInput" placeholder="Entrez le numéro de TVQ">
                @if (!string.IsNullOrEmpty(tvqError))
                {
                    <div class="text-danger mt-1 small">@tvqError</div>
                }
            </div>
        </div>

        <div class="row g-3 mt-3">
            <div class="col-md-6">
                <label for="conditionsPaiement" class="form-label">Conditions de paiement</label>
                <select class="form-select" id="conditionsPaiement" @bind="SingletonForm.ConditionPaiement">
                    <option value="" disabled selected>Veuillez sélectionner une condition</option>
                    @foreach (var condition in PaymentConditions)
                    {
                        <option value="@condition.NomConditionsPaiements">@condition.NomConditionsPaiements</option>
                    }
                </select>
                @if (!string.IsNullOrEmpty(paymentConditionsError))
                {
                    <div class="text-danger mt-1 small">@paymentConditionsError</div>
                }
            </div>
        </div>

        <div class="row g-3 mt-3">
            <div class="col-md-6">
                <fieldset class="border p-3">
                    <legend class="fs-6">Devise</legend>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="cad" name="Devise"
                               checked="@(SingletonForm.Devise == "CAD")"
                               @onchange="@(() => SingletonForm.Devise = "CAD")">
                        <label class="form-check-label" for="cad">CAD – Dollar canadien</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="usd" name="Devise"
                               checked="@(SingletonForm.Devise == "USD")"
                               @onchange="@(() => SingletonForm.Devise = "USD")">
                        <label class="form-check-label" for="usd">USD – Dollar des États-Unis</label>
                    </div>
                </fieldset>
            </div>

            <div class="col-md-6">
                <fieldset class="border p-3">
                    <legend class="fs-6">Mode de communication</legend>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="email" name="ModeCom"
                               checked="@(SingletonForm.ModeCom == "Courriel")"
                               @onchange="@(() => SingletonForm.ModeCom = "Courriel")">
                        <label class="form-check-label" for="email">Courriel</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="courier" name="ModeCom"
                               checked="@(SingletonForm.ModeCom == "Courrier régulier")"
                               @onchange="@(() => SingletonForm.ModeCom = "Courrier régulier")">
                        <label class="form-check-label" for="courier">Courrier régulier</label>
                    </div>
                </fieldset>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-4">
            <button type="submit" class="btn btn-primary">Suivant</button>
        </div>
    </form>
</div>

@code {
    [Inject] private SingletonFormulaire SingletonForm { get; set; }

    [Parameter] public EventCallback<int> OnPageSelected { get; set; }
    [Parameter] public EventCallback<int> Checkpoint { get; set; }

    private List<Conditionspaiement> PaymentConditions { get; set; } = new();
    private string tpsError = string.Empty;
    private string tvqError = string.Empty;
    private string paymentConditionsError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FetchPaymentConditions();
    }

    private async Task FetchPaymentConditions()
    {
        try
        {
            using (var scope = ScopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                // Fetch the entire Conditionspaiement table
                var conditions = await dbContext.Conditionspaiements.ToListAsync();

                // Store the fetched conditions in PaymentConditions
                PaymentConditions = conditions;
            }
        }
        catch (Exception ex)
        {
            paymentConditionsError = "Erreur lors du chargement des conditions de paiement.";
            Console.WriteLine($"Exception: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
        }
    }

    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Validate inputs
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            LogToConsole();
            OnPageSelected.InvokeAsync(pageID);
            //Navigation.NavigateTo("/formulaireDemandeAdresse");
        }
    }

    private void HandleSubmit()
    {
        ResetErrors();

        var isValid = ValidateInputs();
        if (isValid)
        {
            LogToConsole();
            Checkpoint.InvokeAsync(1);
            OnPageSelected.InvokeAsync(1);
        }
    }

    private void ResetErrors()
    {
        tpsError = string.Empty;
        tvqError = string.Empty;
        paymentConditionsError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        if (!string.IsNullOrWhiteSpace(SingletonForm.TpsInput) && !IsNumeric(SingletonForm.TpsInput))
        {
            tpsError = "Le numéro de TPS doit être numérique.";
            isValid = false;
        }

        if (!string.IsNullOrWhiteSpace(SingletonForm.TvqInput) && !IsNumeric(SingletonForm.TvqInput))
        {
            tvqError = "Le numéro de TVQ doit être numérique.";
            isValid = false;
        }

        if (string.IsNullOrEmpty(SingletonForm.ConditionPaiement))
        {
            paymentConditionsError = "Veuillez sélectionner une condition de paiement.";
            isValid = false;
        }

        return isValid;
    }

    private void LogToConsole()
    {
        Console.WriteLine($"Numéro de TPS: {SingletonForm.TpsInput}");
        Console.WriteLine($"Numéro de TVQ: {SingletonForm.TvqInput}");
        Console.WriteLine($"Conditions de paiement: {SingletonForm.ConditionPaiement}");
        Console.WriteLine($"Devise: {SingletonForm.Devise}");
        Console.WriteLine($"Mode de communication: {SingletonForm.ModeCom}");
    }

    private bool IsNumeric(string input) => input.All(char.IsDigit);
}
