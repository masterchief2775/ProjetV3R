@using IntegrationV3R_PortailFournisseur.Data;
﻿@using System.Text.RegularExpressions
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <h5>Adresse de l'entreprise</h5>
        <div class="row mb-3">
            <div class="mb-3 col-6">
                <label for="numCiviqueInput" class="form-label">Numéro Civique</label>
                <input type="text" class="form-control" id="numCiviqueInput" @bind="numCiviqueInput" required>
                @if (!string.IsNullOrEmpty(numCiviqueError))
                {
                    <div class="text-danger">@numCiviqueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="bureauInput" class="form-label">Numéro de Bureau (optionnel)</label>
                <input type="text" class="form-control" id="bureauInput" @bind="bureauInput" maxlength="8">
                @if (!string.IsNullOrEmpty(bureauError))
                {
                    <div class="text-danger">@bureauError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="rueInput" class="form-label">Nom de rue</label>
                <input type="text" class="form-control" id="rueInput" @bind="rueInput" required>
                @if (!string.IsNullOrEmpty(rueError))
                {
                    <div class="text-danger">@rueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="villeInput" class="form-label">Nom Ville</label>
                <input type="text" class="form-control" id="villeInput" @bind="villeInput" required>
                @if (!string.IsNullOrEmpty(villeError))
                {
                    <div class="text-danger">@villeError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="provinceInput" class="form-label">Province</label>
                <input type="text" class="form-control" id="provinceInput" @bind="provinceInput" required>
                @if (!string.IsNullOrEmpty(provinceError))
                {
                    <div class="text-danger">@provinceError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="codePostalInput" class="form-label">Code postal</label>
                <input type="text" class="form-control" id="codePostalInput" @bind="codePostalInput" placeholder="Ex: A1B 2C3" @oninput="FormatCodePostal" maxlength="7" required>
                @if (!string.IsNullOrEmpty(codePostalError))
                {
                    <div class="text-danger">@codePostalError</div>
                }
            </div>
        </div>

        <br />
        <h5>Informations supplémentaires</h5>
        <div class="mb-3">
            <label for="regionInput" class="form-label">Région administrative</label>
            <select class="form-select" id="regionInput" @bind="regionInput" required>
                <option value="">Sélectionner une région</option>
                <option value="Abitibi-Témiscamingue" selected="@(_selectionRegionAdministrative[0] == true)">Abitibi-Témiscamingue</option>
                <option value="Bas-Saint-Laurent" selected="@(_selectionRegionAdministrative[1] == true)">Bas-Saint-Laurent</option>
                <option value="Capitale-Nationale" selected="@(_selectionRegionAdministrative[2] == true)">Capitale-Nationale</option>
                <option value="Centre-du-Québec" selected="@(_selectionRegionAdministrative[3] == true)">Centre-du-Québec</option>
                <option value="Chaudière-Appalaches" selected="@(_selectionRegionAdministrative[4] == true)">Chaudière-Appalaches</option>
                <option value="Côte-Nord" selected="@(_selectionRegionAdministrative[5] == true)">Côte-Nord</option>
                <option value="Estrie" selected="@(_selectionRegionAdministrative[6] == true)">Estrie</option>
                <option value="Gaspésie-–Îles-de-la-Madeleine" selected="@(_selectionRegionAdministrative[7] == true)">Gaspésie–-Îles-de-la-Madeleine</option>
                <option value="Lanaudière" selected="@(_selectionRegionAdministrative[8] == true)">Lanaudière</option>
                <option value="Laurentides" selected="@(_selectionRegionAdministrative[9] == true)">Laurentides</option>
                <option value="Laval" selected="@(_selectionRegionAdministrative[10] == true)">Laval</option>
                <option value="Mauricie" selected="@(_selectionRegionAdministrative[11] == true)">Mauricie</option>
                <option value="Montérégie" selected="@(_selectionRegionAdministrative[12] == true)">Montérégie</option>
                <option value="Montréal" selected="@(_selectionRegionAdministrative[13] == true)">Montréal</option>
                <option value="Nord-du-Québec" selected="@(_selectionRegionAdministrative[14] == true)">Nord-du-Québec</option>
                <option value="Outaouais" selected="@(_selectionRegionAdministrative[15] == true)">Outaouais</option>
                <option value="Saguenay–-Lac-Saint-Jean" selected="@(_selectionRegionAdministrative[16] == true)">Saguenay–-Lac-Saint-Jean</option>
            </select>
            @if (!string.IsNullOrEmpty(regionError))
            {
                <div class="text-danger">@regionError</div>
            }
        </div>

        <div class="mb-3">
            <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone de l'entreprise</label>
            <input type="tel" class="form-control" id="numeroTelephoneInput" @bind="numeroTelephoneInput" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12" required>
            @if (!string.IsNullOrEmpty(numeroTelephoneError))
            {
                <div class="text-danger">@numeroTelephoneError</div>
            }
        </div>

        <div class="mb-3">
            <label for="siteWebInput" class="form-label">Site web de l'entreprise</label>
            <input type="url" class="form-control" id="siteWebInput" @bind="siteWebInput" required>
            @if (!string.IsNullOrEmpty(siteWebError))
            {
                <div class="text-danger">@siteWebError</div>
            }
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    private bool[] _selectionRegionAdministrative = new bool[17];

    private string numCiviqueInput = string.Empty;
    private string rueInput = string.Empty;
    private string bureauInput = string.Empty;
    private string provinceInput = string.Empty;
    private string villeInput = string.Empty;
    private string codePostalInput = string.Empty;
    private string numeroTelephoneInput = string.Empty;
    private string siteWebInput = string.Empty;
    private string regionInput = string.Empty; // Added declaration for regionInput
    private string regionShared = string.Empty;

    private string numCiviqueError = string.Empty;
    private string rueError = string.Empty;
    private string bureauError = string.Empty;
    private string provinceError = string.Empty;
    private string villeError = string.Empty;
    private string codePostalError = string.Empty;
    private string numeroTelephoneError = string.Empty;
    private string siteWebError = string.Empty;
    private string regionError = string.Empty; // Added declaration for regionError

    protected override void OnInitialized()
    {
        for(int i = 0; i<_selectionRegionAdministrative.Length; i++)
        {
            _selectionRegionAdministrative[i] = false;
        }
    }

    public void LoadSharedData()
    {
        numCiviqueInput = SharedData.NumCivique;
        rueInput = SharedData.NomRue;
        villeInput = SharedData.NomVille;
        provinceInput = SharedData.Province;
        codePostalInput = SharedData.CodePostal;
        numeroTelephoneInput = SharedData.NumTelephone;
        //regionAdministraviteInput = SharedData.RegionAdministrative

        switch (SharedData.RegionAdministrative)
        {
            case "Abitibi-Témiscamingue" :
                {
                    _selectionRegionAdministrative[0] = true;
                    break;
                }
            case "Bas-Saint-Laurent":
                {
                    _selectionRegionAdministrative[1] = true;
                    break;
                }
            case "Capitale-Nationale":
                {
                    _selectionRegionAdministrative[2] = true;
                    break;
                }
            case "Centre-du-Québec":
                {
                    _selectionRegionAdministrative[3] = true;
                    break;
                }
            case "Chaudière-Appalaches":
                {
                    _selectionRegionAdministrative[4] = true;
                    break;
                }
            case "Côte-Nord":
                {
                    _selectionRegionAdministrative[5] = true;
                    break;
                }
            case "Estrie":
                {
                    _selectionRegionAdministrative[6] = true;
                    break;
                }
            case "Gaspésie--Îles-de-la-Madeleine":
                {
                    _selectionRegionAdministrative[7] = true;
                    break;
                }
            case "Lanaudière":
                {
                    _selectionRegionAdministrative[8] = true;
                    break;
                }
            case "Laurentides":
                {
                    _selectionRegionAdministrative[9] = true;
                    break;
                }
            case "Laval":
                {
                    _selectionRegionAdministrative[10] = true;
                    break;
                }
            case "Mauricie":
                {
                    _selectionRegionAdministrative[11] = true;
                    break;
                }
            case "Montérégie":
                {
                    _selectionRegionAdministrative[12] = true;
                    break;
                }
            case "Montréal":
                {
                    _selectionRegionAdministrative[13] = true;
                    break;
                }
            case "Nord-du-Québec":
                {
                    _selectionRegionAdministrative[14] = true;
                    break;
                }
            case "Outaouais":
                {
                    _selectionRegionAdministrative[15] = true;
                    break;
                }
            case "Saguenay--Lac-Saint-Jean":
                {
                    _selectionRegionAdministrative[16] = true;
                    break;
                }
            default :
                {
                    break;
                }
        }

        regionInput = SharedData.RegionAdministrative;

        StateHasChanged();
    }
   

    private void HandleSubmit()
    {
        // Reset errors
        numCiviqueError = string.Empty;
        rueError = string.Empty;
        bureauError = string.Empty;
        villeError = string.Empty;
        provinceError = string.Empty;
        codePostalError = string.Empty;
        numeroTelephoneError = string.Empty;
        siteWebError = string.Empty;
        regionError = string.Empty; // Reset region error

        // Basic validation checks
        var isValid = true;

        if (string.IsNullOrWhiteSpace(numCiviqueInput))
        {
            numCiviqueError = "Le numéro civique est requis";
            isValid = false;
        }
        else
        {
            for (int i = 0; i < numCiviqueInput.Length; i++)
            {
                if (!Char.IsDigit(numCiviqueInput[i]))
                {
                    numCiviqueError = "Le numéro civique doit être numérique (Si le numéro contient un suffixe, veuillez rentrer le suffixe dans la section Bureau)";
                    isValid = false;
                }
            }
        }

        if (string.IsNullOrWhiteSpace(rueInput))
        {
            rueError = "Le nom de rue est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(villeInput))
        {
            villeError = "Le nom de la ville est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(provinceInput))
        {
            provinceError = "Le nom de la province est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(codePostalInput))
        {
            codePostalError = "Le code postal est requis et doit être au format valide.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(numeroTelephoneInput))
        {
            numeroTelephoneError = "Le numéro de téléphone est requis et doit être au format valide.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(siteWebInput) || !Uri.IsWellFormedUriString(siteWebInput, UriKind.Absolute))
        {
            siteWebError = "Le site web est requis et doit être une URL valide.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(regionInput))
        {
            regionError = "La région administrative est requise."; // Set error for region
            isValid = false;
        }

        if (isValid)
        {
            // Export and log data
            var formData = ExportFormData();
            LogToInspector(formData);

            // Navigate to the next page
            Checkpoint.InvokeAsync(2);
            OnPageSelected.InvokeAsync(2);
        }
    }

    private string[] ExportFormData()
    {
        return new string[]
        {
            numCiviqueInput,
            bureauInput,
            rueInput,
            villeInput,
            provinceInput,
            codePostalInput,
            numeroTelephoneInput,
            siteWebInput,
            regionInput // Include region in the exported data
        };
    }

    private async void LogToInspector(string[] formData)
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"Numéro Civique: {formData[0]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Bureau: {formData[1]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Nom de Rue: {formData[2]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Ville: {formData[3]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Province: {formData[4]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Code Postal: {formData[5]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Numéro de Téléphone: {formData[6]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Site Web: {formData[7]}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Région Administrative: {formData[8]}"); // Log region
    }

    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        numeroTelephoneInput = input;
    }

    private void FormatCodePostal(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsLetterOrDigit).ToArray());

        if (input.Length > 6)
        {
            input = input.Substring(0, 6);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, " ");
        }

        codePostalInput = input;
    }
}
