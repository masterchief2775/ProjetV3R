@using IntegrationV3R_PortailFournisseur.Data.Services.Scoped;
@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <h5>Adresse de l'entreprise</h5>
        <div class="row mb-3">

            <div class="mb-3 col-6">
                <label for="provinceInput" class="form-label">Province*</label>                  
                <select class="form-select" id="provinceInput" @bind="SingletonForm.ProvinceInput" @onclick="OnProvinceChange">
                    <option value="">Sélectionner votre province</option>
                    @foreach (var province in provinces)
                    {
                        <option value="@province.CodeProvince" >@province.NomProvince</option>
                    }
                </select>
                @if (!string.IsNullOrEmpty(provinceError))
                {
                    <div class="text-danger">@provinceError</div>
                }
                 
            </div>

            <div class="mb-3 col-3">
                <label for="numCiviqueInput" class="form-label">Numéro Civique*</label>
                <input type="text" class="form-control" id="numCiviqueInput" @bind="SingletonForm.NumCiviqueInput">
                @if (!string.IsNullOrEmpty(numCiviqueError))
                {
                    <div class="text-danger">@numCiviqueError</div>
                }
            </div>

            <div class="mb-3 col-3">
                <label for="bureauInput" class="form-label">Numéro de Bureau</label>
                <input type="text" class="form-control" id="bureauInput" @bind="SingletonForm.BureauInput" maxlength="8">
                @if (!string.IsNullOrEmpty(bureauError))
                {
                    <div class="text-danger">@bureauError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="rueInput" class="form-label">Nom de rue*</label>
                <input type="text" class="form-control" id="rueInput" @bind="SingletonForm.RueInput">
                @if (!string.IsNullOrEmpty(rueError))
                {
                    <div class="text-danger">@rueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="villeInput" class="form-label">Nom de Ville*</label>
                @if (SingletonForm.ProvinceInput == "4")
                {
                    @if (municipaliteChoisie == null)
                    {
                        <input type="text" class="form-control" id="municipaliteSearchInput" @bind="municipaliteSearch" @oninput="OnMunicipaliteSearchInput" placeholder="Recherchez votre ville" />
                        <!-- Add a div wrapper with a fixed height and overflow-y to enable scrolling -->
                        <div class="overflow-auto" style="max-height: 200px;">
                            <ul class="list-group" id="productResults">
                                @foreach (var municipalite in filteredMunicipalites)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => SelectMunicipalite(municipalite)">
                                        @municipalite.NomMunicipalite
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <p class="form-control" id="municipaliteInput" @onclick="ChangeMunicipalite">@municipaliteChoisie.NomMunicipalite</p>
                    }
                }
                else
                {
                    <input type="text" class="form-control" id="villeInput" @bind="SingletonForm.NomMunicipaliteInput">
                    
                }


                @if (!string.IsNullOrEmpty(villeError))
                {
                    <div class="text-danger">@villeError</div>
                }
            </div>

            <div class="mb-3 col-3">
                <label for="codePostalInput" class="form-label">Code postal*</label>
                <input type="text" class="form-control" id="codePostalInput" @bind="SingletonForm.CodePostalInput" placeholder="Ex: A1B 2C3" @oninput="FormatCodePostal" maxlength="7">
                @if (!string.IsNullOrEmpty(codePostalError))
                {
                    <div class="text-danger">@codePostalError</div>
                }
            </div>


        <div class="mb-3 col-3">
            <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone de l'entreprise*</label>
            <input type="tel" class="form-control" id="numeroTelephoneInput" @bind="SingletonForm.NumeroTelephoneInput" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12">
            @if (!string.IsNullOrEmpty(numeroTelephoneError))
            {
                <div class="text-danger">@numeroTelephoneError</div>
            }
        </div>

        <div class="mb-3 col-3">
            <label for="numeroPosteInput" class="form-label">Numero de poste</label>
            <input type="text" class="form-control" id="numeroPosteInput" @bind="SingletonForm.NumeroPosteInput">
            @if (!string.IsNullOrEmpty(@numeroPosteError))
            {
                <div class="text-danger">@numeroPosteError</div>
            }
        </div>

        <div class="mb-3 col-6">
            <label for="siteWebInput" class="form-label">Site web de l'entreprise</label>
            <input type="url" class="form-control" id="siteWebInput" @bind="SingletonForm.SiteWebInput">
            @if (!string.IsNullOrEmpty(siteWebError))
            {
                <div class="text-danger">@siteWebError</div>
            }
        </div>
        </div>
        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }
    [Inject] private SingletonFormulaire SingletonForm { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }

    [Parameter]
    public EventCallback<bool> _isModifValid { get; set; }

    [Parameter]
    public int? userid { get; set; } = null;

    private bool[] _selectionRegionAdministrative = new bool[17];


    private string numCiviqueError = string.Empty;
    private string rueError = string.Empty;
    private string bureauError = string.Empty;
    private string provinceError = string.Empty;
    private string villeError = string.Empty;
    private string codePostalError = string.Empty;
    private string numeroTelephoneError = string.Empty;
    private string numeroPosteError = string.Empty;
    private string siteWebError = string.Empty;
    private string regionError = string.Empty;

    private List<Province> provinces = new List<Province>();

    private string municipaliteSearch = string.Empty;
    private Municipalite? municipaliteChoisie = new Municipalite();
    private List<Municipalite> fetchedMunicipalites = new List<Municipalite>();
    private List<Municipalite> filteredMunicipalites = new List<Municipalite>();

    public async Task FetchDataDB()
    {
        municipaliteChoisie = null;
        try
        {
            // Appel à la base de données pour récupérer les régions
            provinces = await dbContext.Provinces.ToListAsync();
            fetchedMunicipalites = await dbContext.Municipalites.ToListAsync();
        }
        catch (Exception ex)
        {
            provinceError = "Erreur lors de la récupération à la BD";
            Console.WriteLine(ex.Message);
        }        

        if (userid != null)
        {
            FormatTelephoneNumber(SingletonForm.NumeroTelephoneInput);
            FormatCodePostal(SingletonForm.CodePostalInput);
            CheckMunicipaliteCorrespondance();
            StateHasChanged();
            /*
            var connectedUser = await dbContext.Users
                .Include(u => u.Fournisseur)
                .ThenInclude(f => f.Adresses)
                .ThenInclude(a => a.CodeMunicipalite)
                .FirstOrDefaultAsync(u => u.UserId == userid);

            Municipalite thisMunicipalite = connectedUser.Fournisseur.Adresses.FirstOrDefault().CodeMunicipaliteNavigation;
            SelectMunicipalite(thisMunicipalite);
        */
        }

        await BDFetched.InvokeAsync(true);
    }    

    public void LoadSharedData()
    {       
        SingletonForm.NumCiviqueInput = SharedData.NumCivique;
        SingletonForm.RueInput = SharedData.NomRue;
        SingletonForm.MunicipaliteInput = SharedData.NomVille;
        SingletonForm.CodePostalInput = SharedData.CodePostal;
        SingletonForm.NumeroTelephoneInput = SharedData.NumTelephone;
        //SingletonForm.RegionInput = SharedData.CodeRegionAdministrative;

        SingletonForm.ProvinceInput = "4";

        FormatTelephoneNumber(SingletonForm.NumeroTelephoneInput);
        CheckMunicipaliteCorrespondance();
        StateHasChanged();        
        //BDFetched.InvokeAsync();
    }

    private void CheckMunicipaliteCorrespondance()
    {
        if (userid == null)
        {
            foreach (var municipalite in fetchedMunicipalites)
            {
                if (municipalite.NomMunicipalite.ToUpper() == SingletonForm.MunicipaliteInput)
                {
                    SingletonForm.MunicipaliteInput = municipalite.CodeMunicipalite;
                    municipaliteChoisie = municipalite;
                }
            }
        }
        else
        {
            foreach (var municipalite in fetchedMunicipalites)
            {
                if (municipalite.CodeMunicipalite == SingletonForm.MunicipaliteInput)
                {                    
                    municipaliteChoisie = municipalite;
                }
            }
        }
    }

    private void OnMunicipaliteSearchInput(ChangeEventArgs e)
    {
        municipaliteSearch = e.Value?.ToString() ?? string.Empty;

        // Only perform search if there are at least 3 characters
        if (municipaliteSearch.Length >= 1)
        {
            SearchMunicipalites();
        }
        else
        {
            filteredMunicipalites.Clear();
        }
    }

    private void OnProvinceChange()
    {
        SingletonForm.MunicipaliteInput = string.Empty;
        municipaliteChoisie = null;
    }

    private void SearchMunicipalites()
    {
        filteredMunicipalites.Clear();


        foreach (var municipalite in fetchedMunicipalites)
        {
            if(municipalite.NomMunicipalite.Contains(municipaliteSearch, StringComparison.OrdinalIgnoreCase))
            {                
                filteredMunicipalites.Add(municipalite);
            }
        }
    }

    private void SelectMunicipalite(Municipalite municipalite)
    {
        municipaliteChoisie = municipalite;
        SingletonForm.MunicipaliteInput = municipalite.CodeMunicipalite;

        municipaliteSearch = string.Empty;
        filteredMunicipalites.Clear();
        StateHasChanged();
    }

    private void ChangeMunicipalite()
    {      
        municipaliteChoisie = null;
        SingletonForm.MunicipaliteInput = string.Empty;
    }

    private void HandleSubmit()
    {        
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {            
            Checkpoint.InvokeAsync(2);
            OnPageSelected.InvokeAsync(2);
        }
    }

    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, export and log data to console
        if (isValid)
        {    
            _isModifValid.InvokeAsync(true);
            OnPageSelected.InvokeAsync(pageID);
        }
    }

    private void ResetErrors()
    {
        numCiviqueError = string.Empty;
        rueError = string.Empty;
        bureauError = string.Empty;
        villeError = string.Empty;
        provinceError = string.Empty;
        codePostalError = string.Empty;
        numeroTelephoneError = string.Empty;
        siteWebError = string.Empty;
        regionError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        if (string.IsNullOrWhiteSpace(SingletonForm.NumCiviqueInput))
        {
            numCiviqueError = "Le numéro civique est requis.";
            isValid = false;
        }
        else if (!SingletonForm.NumCiviqueInput.All(char.IsDigit))
        {
            numCiviqueError = "Le numéro civique doit être numérique.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.RueInput))
        {
            rueError = "Le nom de rue est requis.";
            isValid = false;
        }

        if (SingletonForm.ProvinceInput == "4")
        {
            if (string.IsNullOrWhiteSpace(SingletonForm.MunicipaliteInput))
            {
                villeError = "Le nom de la ville est requis.";
                isValid = false;
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(SingletonForm.NomMunicipaliteInput))
            {
                villeError = "Le nom de la ville est requis.";
                isValid = false;
            }
            else if(SingletonForm.NomMunicipaliteInput.Length > 64)
            {
                villeError = "Le nom de la ville doit être moins de 64 caractères.";
                isValid = false;
            }
        }


        if (string.IsNullOrWhiteSpace(SingletonForm.ProvinceInput))
        {
            provinceError = "Le nom de la province est requis.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.CodePostalInput))
        {
            codePostalError = "Le code postal est requis.";
            isValid = false;
        }
        else if (!Regex.IsMatch(SingletonForm.CodePostalInput, @"^[A-Z][0-9][A-Z] [0-9][A-Z][0-9]$") && !Regex.IsMatch(SingletonForm.CodePostalInput, @"^[A-Z][0-9][A-Z][0-9][A-Z][0-9]$"))
        {
            codePostalError = "Le code postal doit être au formet A0A 0A0";
            isValid = false;
        }

        // Validate phone number format
        if (string.IsNullOrWhiteSpace(SingletonForm.NumeroTelephoneInput))
        {
            numeroTelephoneError = "Le numéro de téléphone est requis.";
            isValid = false;
        }
        else if (!Regex.IsMatch(SingletonForm.NumeroTelephoneInput, @"^\d{3}-\d{3}-\d{4}$"))
        {
            numeroTelephoneError = "Le numéro de téléphone doit être au format XXX-XXX-XXXX.";
            isValid = false;
        }

        if (!string.IsNullOrWhiteSpace(SingletonForm.NumeroPosteInput))
        {
            bool isNumeric = int.TryParse(SingletonForm.NumeroPosteInput, out int n);
            if (!isNumeric || SingletonForm.NumeroPosteInput.Length > 5)
            {
                numeroPosteError = "Le numero de poste doit être numérique et au plus de 5 chiffres.";
                isValid = false;
            }
        }

        return isValid;
    }

    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        SingletonForm.NumeroTelephoneInput = input;
    }

    private void FormatTelephoneNumber(string e)
    {
        var input = e;
        if(input != null)
        {
            input = new string(input.Where(char.IsDigit).ToArray());

            if (input.Length > 10)
            {
                input = input.Substring(0, 10);
            }

            if (input.Length > 3)
            {
                input = input.Insert(3, "-");
            }
            if (input.Length > 7)
            {
                input = input.Insert(7, "-");
            }

            SingletonForm.NumeroTelephoneInput = input;
        }        
    }

    private void FormatCodePostal(ChangeEventArgs e)
    {
        // Format the postal code as the user types
        var value = e.Value.ToString().ToUpper().Replace(" ", "").Replace("-", "");
        if (value.Length >= 6)
        {
            SingletonForm.CodePostalInput = $"{value.Substring(0, 3)} {value.Substring(3, 3)}";
        }
        else
        {
            SingletonForm.CodePostalInput = value;
        }
    }

    private void FormatCodePostal(string e)
    {
        // Format the postal code as the user types
        var value = e;
        if (value.Length == 6)
        {
            SingletonForm.CodePostalInput = $"{value.Substring(0, 3)} {value.Substring(3, 3)}";
        }
        else
        {
            SingletonForm.CodePostalInput = value;
        }
    }

}
