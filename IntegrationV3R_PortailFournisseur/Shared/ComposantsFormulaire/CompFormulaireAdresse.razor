@using IntegrationV3R_PortailFournisseur.Data.Services;
@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <h5>Adresse de l'entreprise</h5>
        <div class="row mb-3">
            <div class="mb-3 col-6">
                <label for="numCiviqueInput" class="form-label">Numéro Civique*</label>
                <input type="text" class="form-control" id="numCiviqueInput" @bind="SingletonForm.NumCiviqueInput" required>
                @if (!string.IsNullOrEmpty(numCiviqueError))
                {
                    <div class="text-danger">@numCiviqueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="bureauInput" class="form-label">Numéro de Bureau</label>
                <input type="text" class="form-control" id="bureauInput" @bind="SingletonForm.BureauInput" maxlength="8">
                @if (!string.IsNullOrEmpty(bureauError))
                {
                    <div class="text-danger">@bureauError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="rueInput" class="form-label">Nom de rue*</label>
                <input type="text" class="form-control" id="rueInput" @bind="SingletonForm.RueInput" required>
                @if (!string.IsNullOrEmpty(rueError))
                {
                    <div class="text-danger">@rueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="villeInput" class="form-label">Nom Ville*</label>
                <input type="text" class="form-control" id="villeInput" @bind="SingletonForm.VilleInput" required>
                @if (!string.IsNullOrEmpty(villeError))
                {
                    <div class="text-danger">@villeError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="provinceInput" class="form-label">Province*</label>
                <input type="text" class="form-control" id="provinceInput" @bind="SingletonForm.ProvinceInput" required>
                @if (!string.IsNullOrEmpty(provinceError))
                {
                    <div class="text-danger">@provinceError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="codePostalInput" class="form-label">Code postal*</label>
                <input type="text" class="form-control" id="codePostalInput" @bind="SingletonForm.CodePostalInput" placeholder="Ex: A1B 2C3" @oninput="FormatCodePostal" maxlength="7" required>
                @if (!string.IsNullOrEmpty(codePostalError))
                {
                    <div class="text-danger">@codePostalError</div>
                }
            </div>
        </div>

        <br />
        <h5>Informations supplémentaires</h5>
        <div class="mb-3">
            <label for="regionInput" class="form-label">Région administrative*</label>
            <select class="form-select" id="regionInput" @bind="SingletonForm.RegionInput" required>
                <option value="">Sélectionner une région</option>
                @foreach (var region in regions)
                {
                    <option value="@region.CodeRegionAdministrative">@region.NomRegionAmdin</option>
                }
            </select>
            @if (!string.IsNullOrEmpty(regionError))
            {
                <div class="text-danger">@regionError</div>
            }
        </div>

        <div class="mb-3">
            <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone de l'entreprise*</label>
            <input type="tel" class="form-control" id="numeroTelephoneInput" @bind="SingletonForm.NumeroTelephoneInput" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12" required>
            @if (!string.IsNullOrEmpty(numeroTelephoneError))
            {
                <div class="text-danger">@numeroTelephoneError</div>
            }
        </div>

        <div class="mb-3">
            <label for="siteWebInput" class="form-label">Site web de l'entreprise</label>
            <input type="url" class="form-control" id="siteWebInput" @bind="SingletonForm.SiteWebInput">
            @if (!string.IsNullOrEmpty(siteWebError))
            {
                <div class="text-danger">@siteWebError</div>
            }
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }
    private SingletonFormulaire SingletonForm => SingletonFormulaire.Instance;

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }

    private bool[] _selectionRegionAdministrative = new bool[17];

    
    private string numCiviqueError = string.Empty;
    private string rueError = string.Empty;
    private string bureauError = string.Empty;
    private string provinceError = string.Empty;
    private string villeError = string.Empty;
    private string codePostalError = string.Empty;
    private string numeroTelephoneError = string.Empty;
    private string siteWebError = string.Empty;
    private string regionError = string.Empty;

    private List<Regionadministrative> regions = new List<Regionadministrative>();

    public async Task FetchDataDB()
    {
        try
        {
            // Appel à la base de données pour récupérer les régions
            regions = await dbContext.Regionadministratives.ToListAsync();
        }
        catch (Exception ex)
        {
            regionError = "Erreur lors de la récupération des régions.";
            Console.WriteLine(ex.Message);
        }        
        BDFetched.InvokeAsync(true);
    }

    protected override async Task OnInitializedAsync()
    {
        FetchDataDB();
    }

    public void LoadSharedData()
    {       
        SingletonForm.NumCiviqueInput = SharedData.NumCivique;
        SingletonForm.RueInput = SharedData.NomRue;
        SingletonForm.VilleInput = SharedData.NomVille;
        SingletonForm.ProvinceInput = SharedData.Province;
        SingletonForm.CodePostalInput = SharedData.CodePostal;
        SingletonForm.NumeroTelephoneInput = SharedData.NumTelephone;
        SingletonForm.RegionInput = SharedData.CodeRegionAdministrative;

        FormatTelephoneNumber(SingletonForm.NumeroTelephoneInput);
        StateHasChanged();        
        //BDFetched.InvokeAsync();
    }

    private void HandleSubmit()
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, log the data and navigate
        if (isValid)
        {
            LogToConsole();
            Checkpoint.InvokeAsync(2);
            OnPageSelected.InvokeAsync(2);
        }
    }

    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, export and log data to console
        if (isValid)
        {            
            LogToConsole();
            OnPageSelected.InvokeAsync(pageID);
        }
    }

    private void ResetErrors()
    {
        numCiviqueError = string.Empty;
        rueError = string.Empty;
        bureauError = string.Empty;
        villeError = string.Empty;
        provinceError = string.Empty;
        codePostalError = string.Empty;
        numeroTelephoneError = string.Empty;
        siteWebError = string.Empty;
        regionError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        if (string.IsNullOrWhiteSpace(SingletonForm.NumCiviqueInput))
        {
            numCiviqueError = "Le numéro civique est requis";
            isValid = false;
        }
        else if (!SingletonForm.NumCiviqueInput.All(char.IsDigit))
        {
            numCiviqueError = "Le numéro civique doit être numérique.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.RueInput))
        {
            rueError = "Le nom de rue est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.VilleInput))
        {
            villeError = "Le nom de la ville est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.ProvinceInput))
        {
            provinceError = "Le nom de la province est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.CodePostalInput))
        {
            codePostalError = "Le code postal est requis.";
            isValid = false;
        }

        // Validate phone number format
        if (string.IsNullOrWhiteSpace(SingletonForm.NumeroTelephoneInput))
        {
            numeroTelephoneError = "Le numéro de téléphone est requis.";
            isValid = false;
        }
        else if (!Regex.IsMatch(SingletonForm.NumeroTelephoneInput, @"^\d{3}-\d{3}-\d{4}$"))
        {
            numeroTelephoneError = "Le numéro de téléphone doit être au format XXX-XXX-XXXX.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SingletonForm.RegionInput))
        {
            regionError = "La région est requise.";
            isValid = false;
        }

        return isValid;
    }

    private void LogToConsole()
    {
        Console.WriteLine($"Numéro Civique: {SingletonForm.NumCiviqueInput}");
        Console.WriteLine($"Bureau: {SingletonForm.BureauInput}");
        Console.WriteLine($"Rue: {SingletonForm.RueInput}");
        Console.WriteLine($"Ville: {SingletonForm.VilleInput}");
        Console.WriteLine($"Province: {SingletonForm.ProvinceInput}");
        Console.WriteLine($"Code Postal: {SingletonForm.CodePostalInput}");
        Console.WriteLine($"Région: {SingletonForm.RegionInput}");
        Console.WriteLine($"Numéro de téléphone: {SingletonForm.NumeroTelephoneInput}");
        Console.WriteLine($"Site Web: {SingletonForm.SiteWebInput}");
    }

    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        SingletonForm.NumeroTelephoneInput = input;
    }

    private void FormatTelephoneNumber(string e)
    {
        var input = e;
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        SingletonForm.NumeroTelephoneInput = input;
    }

    private void FormatCodePostal(ChangeEventArgs e)
    {
        // Format the postal code as the user types
        var value = e.Value.ToString().ToUpper().Replace(" ", "").Replace("-", "");
        if (value.Length >= 6)
        {
            SingletonForm.CodePostalInput = $"{value.Substring(0, 3)} {value.Substring(3, 3)}";
        }
        else
        {
            SingletonForm.CodePostalInput = value;
        }
    }
    
}
