@using IntegrationV3R_PortailFournisseur.Data.Services;
@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using IntegrationV3R_PortailFournisseur.Data.Models

@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <h5>Adresse de l'entreprise</h5>
        <div class="row mb-3">
            <div class="mb-3 col-6">
                <label for="numCiviqueInput" class="form-label">Numéro Civique</label>
                <input type="text" class="form-control" id="numCiviqueInput" @bind="numCiviqueInput" required>
                @if (!string.IsNullOrEmpty(numCiviqueError))
                {
                    <div class="text-danger">@numCiviqueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="bureauInput" class="form-label">Numéro de Bureau (optionnel)</label>
                <input type="text" class="form-control" id="bureauInput" @bind="bureauInput" maxlength="8">
                @if (!string.IsNullOrEmpty(bureauError))
                {
                    <div class="text-danger">@bureauError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="rueInput" class="form-label">Nom de rue</label>
                <input type="text" class="form-control" id="rueInput" @bind="rueInput" required>
                @if (!string.IsNullOrEmpty(rueError))
                {
                    <div class="text-danger">@rueError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="villeInput" class="form-label">Nom Ville</label>
                <input type="text" class="form-control" id="villeInput" @bind="villeInput" required>
                @if (!string.IsNullOrEmpty(villeError))
                {
                    <div class="text-danger">@villeError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="provinceInput" class="form-label">Province</label>
                <input type="text" class="form-control" id="provinceInput" @bind="provinceInput" required>
                @if (!string.IsNullOrEmpty(provinceError))
                {
                    <div class="text-danger">@provinceError</div>
                }
            </div>

            <div class="mb-3 col-6">
                <label for="codePostalInput" class="form-label">Code postal</label>
                <input type="text" class="form-control" id="codePostalInput" @bind="codePostalInput" placeholder="Ex: A1B 2C3" @oninput="FormatCodePostal" maxlength="7" required>
                @if (!string.IsNullOrEmpty(codePostalError))
                {
                    <div class="text-danger">@codePostalError</div>
                }
            </div>
        </div>

        <br />
        <h5>Informations supplémentaires</h5>
        <div class="mb-3">
            <label for="regionInput" class="form-label">Région administrative</label>
            <select class="form-select" id="regionInput" @bind="regionInput" required>
                <option value="">Sélectionner une région</option>
                @foreach (var region in regions)
                {
                    <option value="@region.CodeRegionAdministrative">@region.NomRegionAmdin</option>
                }
            </select>
            @if (!string.IsNullOrEmpty(regionError))
            {
                <div class="text-danger">@regionError</div>
            }
        </div>

        <div class="mb-3">
            <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone de l'entreprise</label>
            <input type="tel" class="form-control" id="numeroTelephoneInput" @bind="numeroTelephoneInput" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12" required>
            @if (!string.IsNullOrEmpty(numeroTelephoneError))
            {
                <div class="text-danger">@numeroTelephoneError</div>
            }
        </div>

        <div class="mb-3">
            <label for="siteWebInput" class="form-label">Site web de l'entreprise</label>
            <input type="url" class="form-control" id="siteWebInput" @bind="siteWebInput" >
            @if (!string.IsNullOrEmpty(siteWebError))
            {
                <div class="text-danger">@siteWebError</div>
            }
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }

    private bool[] _selectionRegionAdministrative = new bool[17];

    private string numCiviqueInput = string.Empty;
    private string rueInput = string.Empty;
    private string bureauInput = string.Empty;
    private string provinceInput = string.Empty;
    private string villeInput = string.Empty;
    private string codePostalInput = string.Empty;
    private string numeroTelephoneInput = string.Empty;
    private string siteWebInput = string.Empty;
    private string regionInput = string.Empty; // Added declaration for regionInput
    private string regionShared = string.Empty;

    private string numCiviqueError = string.Empty;
    private string rueError = string.Empty;
    private string bureauError = string.Empty;
    private string provinceError = string.Empty;
    private string villeError = string.Empty;
    private string codePostalError = string.Empty;
    private string numeroTelephoneError = string.Empty;
    private string siteWebError = string.Empty;
    private string regionError = string.Empty;

    private List<Regionadministrative> regions = new List<Regionadministrative>();

    public async Task FetchDataDB()
    {
        try
        {
            // Appel à la base de données pour récupérer les régions
            regions = await dbContext.Regionadministratives.ToListAsync();
        }
        catch (Exception ex)
        {
            regionError = "Erreur lors de la récupération des régions.";
            Console.WriteLine(ex.Message);
        }        
        BDFetched.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        FetchDataDB();
    }

    public void LoadSharedData()
    {
        System.Threading.Thread.Sleep(1000);
        numCiviqueInput = SharedData.NumCivique;
        rueInput = SharedData.NomRue;
        villeInput = SharedData.NomVille;
        provinceInput = SharedData.Province;
        codePostalInput = SharedData.CodePostal;
        numeroTelephoneInput = SharedData.NumTelephone;
        regionInput = SharedData.CodeRegionAdministrative;

        FormatTelephoneNumber(numeroTelephoneInput);
        StateHasChanged();        
        //BDFetched.InvokeAsync();
    }

    private void HandleSubmit()
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, export and log data to console
        if (isValid)
        {
            var formData = ExportFormData();
            LogToConsole(formData);

            Checkpoint.InvokeAsync(2);
            OnPageSelected.InvokeAsync(2);
        }
    }

    public void HandleSubmitReturn(int pageID)
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, export and log data to console
        if (isValid)
        {
            var formData = ExportFormData();
            LogToConsole(formData);

            OnPageSelected.InvokeAsync(pageID);
        }
    }

    private void ResetErrors()
    {
        numCiviqueError = string.Empty;
        rueError = string.Empty;
        bureauError = string.Empty;
        villeError = string.Empty;
        provinceError = string.Empty;
        codePostalError = string.Empty;
        numeroTelephoneError = string.Empty;
        siteWebError = string.Empty;
        regionError = string.Empty;
    }

    private bool ValidateInputs()
    {
        var isValid = true;

        if (string.IsNullOrWhiteSpace(numCiviqueInput))
        {
            numCiviqueError = "Le numéro civique est requis";
            isValid = false;
        }
        else if (!numCiviqueInput.All(char.IsDigit))
        {
            numCiviqueError = "Le numéro civique doit être numérique.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(rueInput))
        {
            rueError = "Le nom de rue est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(villeInput))
        {
            villeError = "Le nom de la ville est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(provinceInput))
        {
            provinceError = "Le nom de la province est requis";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(codePostalInput))
        {
            codePostalError = "Le code postal est requis.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(numeroTelephoneInput))
        {
            numeroTelephoneError = "Le numéro de téléphone est requis.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(regionInput))
        {
            regionError = "La région est requise.";
            isValid = false;
        }

        return isValid;
    }

    private string ExportFormData()
    {
        // Create a formatted string of form data
        return $"Numéro Civique: {numCiviqueInput}, Bureau: {bureauInput}, Rue: {rueInput}, " +
               $"Ville: {villeInput}, Province: {provinceInput}, Code Postal: {codePostalInput}, " +
               $"Numéro de Téléphone: {numeroTelephoneInput}, Site Web: {siteWebInput}, " +
               $"Région: {regionInput}";
    }

    private void LogToConsole(string formData)
    {
        Console.WriteLine(formData);
        // Optionally, you can use JS interop to log data to the browser console
        // await JSRuntime.InvokeVoidAsync("console.log", formData);
    }

    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        numeroTelephoneInput = input;
    }

    private void FormatTelephoneNumber(string e)
    {
        var input = e;
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        numeroTelephoneInput = input;
    }

    private void FormatCodePostal(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = new string(input.Where(char.IsLetterOrDigit).ToArray());

        if (input.Length > 6)
        {
            input = input.Substring(0, 6);
        }

        if (input.Length > 3)
        {
            input = input.Insert(3, " ");
        }

        codePostalInput = input;
    }
}
