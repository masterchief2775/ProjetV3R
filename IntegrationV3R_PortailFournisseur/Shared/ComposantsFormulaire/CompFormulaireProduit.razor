@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">

        <!-- Product Description -->
        <div class="mb-3">
            <label for="productDescriptionInput" class="form-label">Description du produit</label>
            <textarea class="form-control" id="productDescriptionInput" @bind="productDescription" rows="3" required></textarea>
            @if (!string.IsNullOrEmpty(productDescriptionError))
            {
                <div class="text-danger">@productDescriptionError</div>
            }
        </div>

        <!-- Product Search -->
        <div class="mb-3">
            <label for="productSearchInput" class="form-label">Rechercher des produits</label>
            <input type="text" class="form-control" id="productSearchInput" @bind="productSearch" @oninput="OnProductSearchInput" placeholder="Recherchez des produits..."/>
            @if (filteredProducts != null && filteredProducts.Any())
            {
                <ul class="list-group" id="productResults">
                    @foreach (var product in filteredProducts)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => SelectProduct(product)">
                            @product
                            <button type="button" class="btn-close btn-close-sm" aria-label="Close" @onclick="() => RemoveProduct(product)"></button>
                        </li>
                    }
                </ul>
            }
            @if (!string.IsNullOrEmpty(productSearchError))
            {
                <div class="text-danger">@productSearchError</div>
            }
        </div>

        <!-- Selected Products -->
        <div class="mb-3">
            <h5>Produits sélectionnés</h5>
            <ul>
                @if (selectedProducts.Any())
                {
                    foreach (var product in selectedProducts)
                    {
                        <li>
                            <strong>@product</strong>
                            <button type="button" class="btn btn-link text-danger btn-sm" @onclick="() => RemoveProduct(product)" style="margin-left: 10px; padding: 0;">&times;</button>
                        </li>
                    }
                }
                else
                {
                    <li>Aucun produit sélectionné.</li>
                }
            </ul>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }
    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    private string productDescription = string.Empty;
    private string productSearch = string.Empty;

    private string productDescriptionError = string.Empty;
    private string productSearchError = string.Empty;

    // Simulated products for testing purposes
    private List<string> allProducts = new List<string>
    {
        "Produit A", "Produit B", "Produit C", "Produit D", "Produit E", "Produit F", "Produit G"
    };

    private List<string> filteredProducts = new List<string>();
    private List<string> selectedProducts = new List<string>();

    // Handle the form submission
    private void HandleSubmit()
    {
        // Reset errors
        ResetErrors();

        // Basic validation checks
        var isValid = ValidateInputs();

        // If valid, export and log data to console
        if (isValid)
        {
            var formData = ExportFormData();
            LogToConsole(formData);

            Checkpoint.InvokeAsync(4);
            OnPageSelected.InvokeAsync(4);
        }
    }

    // Reset error messages
    private void ResetErrors()
    {
        productDescriptionError = string.Empty;
        productSearchError = string.Empty;
    }

    // Validate inputs
    private bool ValidateInputs()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(productDescription))
        {
            productDescriptionError = "La description du produit est requise.";
            isValid = false;
        }

        if (!selectedProducts.Any())
        {
            productSearchError = "Au moins un produit doit être sélectionné.";
            isValid = false;
        }

        return isValid;
    }

    // Export form data as an array of strings
    private string[] ExportFormData()
    {
        return new string[]
        {
            productDescription,
            string.Join(", ", selectedProducts)
        };
    }

    // Handle search input dynamically for products
    private void OnProductSearchInput(ChangeEventArgs e)
    {
        productSearch = e.Value?.ToString() ?? string.Empty;

        // Only perform search if there are at least 3 characters
        if (productSearch.Length >= 3)
        {
            SearchProducts();
        }
        else
        {
            filteredProducts.Clear();
        }
    }

    // Search and filter products
    private void SearchProducts()
    {
        filteredProducts = allProducts
            .Where(product => product.Contains(productSearch, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    // Select a product from the search results
    private void SelectProduct(string product)
    {
        if (!selectedProducts.Contains(product))
        {
            selectedProducts.Add(product);
            productSearch = string.Empty; // Clear the search input after selection
            filteredProducts.Clear(); // Clear search results after selection
        }
    }

    // Remove a product from the selected list
    private void RemoveProduct(string product)
    {
        selectedProducts.Remove(product);
    }

    // Log data to the console using Console.WriteLine
    private void LogToConsole(string[] formData)
    {
        Console.WriteLine($"Description du produit: {formData[0]}");
        Console.WriteLine($"Produits sélectionnés: {formData[1]}");
    }
}
