@using IntegrationV3R_PortailFournisseur.Data.Models;﻿
@using Microsoft.EntityFrameworkCore;

@inject IJSRuntime JSRuntime
@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">

        <!-- Product Description -->
        <div class="mb-3">
            <label for="productDescriptionInput" class="form-label">Description du produit</label>
            <textarea class="form-control" id="productDescriptionInput" @bind="productDescription" rows="3"></textarea>
            @if (!string.IsNullOrEmpty(productDescriptionError))
            {
                <div class="text-danger">@productDescriptionError</div>
            }
        </div>

        <!-- Product Search -->
        <div class="mb-3">
            <label for="productSearchInput" class="form-label">Rechercher des produits</label>
            <input type="text" class="form-control" id="productSearchInput" @bind="productSearch" @oninput="OnProductSearchInput" placeholder="Recherchez des produits..." />
            @if (filteredProducts != null && filteredProducts.Any())
            {
                <ul class="list-group" id="productResults">
                    @foreach (var product in filteredProducts)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => SelectProduct(product)">
                            @product.ComoditeNombre - @product.ComoditeTitreFr
                            <button type="button" class="btn-close btn-close-sm" aria-label="Close" @onclick="() => RemoveProduct(product)"></button>
                        </li>
                    }
                </ul>
            }
            @if (!string.IsNullOrEmpty(productSearchError))
            {
                <div class="text-danger">@productSearchError</div>
            }
        </div>

        <!-- Selected Products -->
        <div class="mb-3">
            <h5>Produits sélectionnés</h5>
            <ul>
                @if (selectedProducts.Any())
                {
                    foreach (var product in selectedProducts)
                    {
                        <li>
                            <strong>@product</strong>
                            <button type="button" class="btn btn-link text-danger btn-sm" @onclick="() => RemoveProduct(product)" style="margin-left: 10px; padding: 0;">&times;</button>
                        </li>
                    }
                }
                else
                {
                    <li>Aucun produit sélectionné.</li>
                }
            </ul>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>
    <p>@fetchedProducts.Count</p>
    @foreach (var item in fetchedProducts)
    {
        <p>@item</p>
    }
</div>

@code {
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }
    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }
    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }

    private string productDescription = string.Empty;
    private string productSearch = string.Empty;

    private string productDescriptionError = string.Empty;
    private string productSearchError = string.Empty;

    // Simulated products for testing purposes
    private List<string> allProducts = new List<string>
    {
        "Produit A", "Produit B", "Produit C", "Produit D", "Produit E", "Produit F", "Produit G"
    };

    private List<UnspscComodite> filteredProducts = new List<UnspscComodite>();
    private List<UnspscComodite> selectedProducts = new List<UnspscComodite>();
    private List<UnspscComodite> fetchedProducts = new List<UnspscComodite>();

    public async Task FetchDataDB()
    {
        try
        {
            // Appel à la base de données pour récupérer les régions
            fetchedProducts = await dbContext.UnspscComodites.ToListAsync();
        }
        catch (Exception ex)
        {
            productSearchError = "Erreur lors de la récupération des régions.";
            Console.WriteLine(ex.Message);
        }
        BDFetched.InvokeAsync();
    }

    // Handle the form submission
    private async Task HandleSubmit()
    {
        // Reset error messages and validation flag
        productDescriptionError = string.Empty;
        productSearchError = string.Empty;

        bool isValid = true; // Reset isValid to true

        // Validation logic
        if (string.IsNullOrWhiteSpace(productDescription))
        {
            productDescriptionError = "La description du produit est requise.";
            isValid = false; // Set isValid to false if validation fails
        }
        if (!selectedProducts.Any())
        {
            productSearchError = "Au moins un produit doit être sélectionné.";
            isValid = false; // Set isValid to false if validation fails
        }

        // If there are any errors, do not proceed
        if (!isValid)
        {
            return;
        }

        // Log data to the console
        await JSRuntime.InvokeVoidAsync("exportFormDataToConsole", productDescription, selectedProducts);

        // Trigger checkpoint and page change
        await Checkpoint.InvokeAsync(4);
        await OnPageSelected.InvokeAsync(4);
    }

    // Handle search input dynamically for products
    private void OnProductSearchInput(ChangeEventArgs e)
    {
        productSearch = e.Value?.ToString() ?? string.Empty;

        // Only perform search if there are at least 3 characters
        if (productSearch.Length >= 3)
        {
            SearchProducts();
        }
        else
        {
            filteredProducts.Clear();
        }
    }

    // Search and filter products
    private void SearchProducts()
    {
        filteredProducts.Clear();

        foreach (var produit in fetchedProducts)
        {
            if (produit.ComoditeTitreFr.Contains(productSearch, StringComparison.OrdinalIgnoreCase) || produit.ComoditeNombre.Contains(productSearch, StringComparison.OrdinalIgnoreCase) || produit.ComoditeTitreEn.Contains(productSearch, StringComparison.OrdinalIgnoreCase))
            {
                filteredProducts.Add(produit);
            }
        }
    }

    // Select a product from the search results
    private void SelectProduct(UnspscComodite product)
    {
        if (!selectedProducts.Contains(product))
        {
            selectedProducts.Add(product);
            productSearch = string.Empty; // Clear the search input after selection
            filteredProducts.Clear(); // Clear search results after selection
        }
    }

    // Remove a product from the selected list
    private void RemoveProduct(UnspscComodite product)
    {
        selectedProducts.Remove(product);
    }
}
