@using System.Text.RegularExpressions

<div class="container-fluid mt-4">    

    <form class="form" @onsubmit="HandleSubmit">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }

        @foreach (var contact in contacts)
        {
            <div class="contact-entry mb-3 row">
                <div class="col-6 mb-3">
                    <label for="prenomInput" class="form-label">Prénom</label>
                    <input type="text" class="form-control" @bind="contact.Prenom" maxlength="32">
                    @if (!string.IsNullOrEmpty(contact.PrenomError))
                    {
                        <div class="text-danger">@contact.PrenomError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="nomInput" class="form-label">Nom</label>
                    <input type="text" class="form-control" @bind="contact.Nom" maxlength="32">
                    @if (!string.IsNullOrEmpty(contact.NomError))
                    {
                        <div class="text-danger">@contact.NomError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="roleInput" class="form-label">Fonction</label>
                    <input type="text" class="form-control" @bind="contact.Role" maxlength="32">
                    @if (!string.IsNullOrEmpty(contact.RoleError))
                    {
                        <div class="text-danger">@contact.RoleError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="emailInput" class="form-label">Email</label>
                    <input type="email" class="form-control" @bind="contact.Email" maxlength="64">
                    @if (!string.IsNullOrEmpty(contact.EmailError))
                    {
                        <div class="text-danger">@contact.EmailError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone</label>
                    <input type="tel" class="form-control" @bind="contact.NumeroTelephone" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12">
                    @if (!string.IsNullOrEmpty(contact.NumeroTelephoneError))
                    {
                        <div class="text-danger">@contact.NumeroTelephoneError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="typeTelephoneInput" class="form-label">Type de téléphone</label>
                    <select class="form-control" @bind="contact.TypeTelephone">
                        <option value="">Sélectionner...</option>
                        <option value="Bureau">Bureau</option>
                        <option value="Télécopieur">Télécopieur</option>
                        <option value="Cellulaire">Cellulaire</option>
                    </select>
                    @if (!string.IsNullOrEmpty(contact.TypeTelephoneError))
                    {
                        <div class="text-danger">@contact.TypeTelephoneError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="posteInput" class="form-label">Poste</label>
                    <input type="text" class="form-control" @bind="contact.Poste" maxlength="6">
                    @if (!string.IsNullOrEmpty(contact.PosteError))
                    {
                        <div class="text-danger">@contact.PosteError</div>
                    }
                </div>                

                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoveContact(contact)">Supprimer</button>
            </div>
        }

        <button type="button" class="btn btn-success mb-3" @onclick="AddContact">+</button>
        <button type="submit" class="btn btn-primary">Confirmer</button>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    private List<Contact> contacts = new List<Contact>();
    private string errorMessage = string.Empty;

    private void AddContact()
    {
        contacts.Add(new Contact());
        errorMessage = string.Empty; // Clear error message when a contact is added
    }

    private void RemoveContact(Contact contact)
    {
        contacts.Remove(contact);
        errorMessage = string.Empty; // Clear error message when a contact is removed
    }

    private void HandleSubmit()
    {
        // Reset errors
        errorMessage = string.Empty;
        var isValid = true;

        // Validate all contact fields
        foreach (var contact in contacts)
        {
            contact.PrenomError = string.IsNullOrWhiteSpace(contact.Prenom) ? "Le prénom est requis." : string.Empty;
            contact.NomError = string.IsNullOrWhiteSpace(contact.Nom) ? "Le nom est requis." : string.Empty;
            contact.RoleError = string.IsNullOrWhiteSpace(contact.Role) ? "Le rôle est requis." : string.Empty;
            contact.EmailError = string.IsNullOrWhiteSpace(contact.Email) || !contact.Email.Contains("@") ? "Un email valide est requis." : string.Empty;
            contact.NumeroTelephoneError = string.IsNullOrWhiteSpace(contact.NumeroTelephone) || !Regex.IsMatch(contact.NumeroTelephone, @"^\d{3}-\d{3}-\d{4}$") ? "Un numéro de téléphone valide est requis." : string.Empty;
            contact.TypeTelephoneError = string.IsNullOrWhiteSpace(contact.TypeTelephone) ? "Le type de téléphone est requis." : string.Empty;

            // Validate Poste
            if (string.IsNullOrWhiteSpace(contact.Poste))
            {
                contact.PosteError = "Le poste est requis.";
                isValid = false;
            }
            else if (!Regex.IsMatch(contact.Poste, @"^\d{1,6}$"))
            {
                contact.PosteError = "Le poste doit être numérique et contenir au maximum 6 chiffres.";
                isValid = false;
            }
            else
            {
                contact.PosteError = string.Empty; // Clear error if valid
            }

            // If any errors exist, the form is invalid
            if (!string.IsNullOrEmpty(contact.PrenomError) || !string.IsNullOrEmpty(contact.NomError) ||
                !string.IsNullOrEmpty(contact.RoleError) || !string.IsNullOrEmpty(contact.EmailError) ||
                !string.IsNullOrEmpty(contact.NumeroTelephoneError) || !string.IsNullOrEmpty(contact.TypeTelephoneError) ||
                !string.IsNullOrEmpty(contact.PosteError))
            {
                isValid = false;
            }
        }

        // Global validation: At least one contact must be added
        if (contacts.Count == 0)
        {
            errorMessage = "Au moins un contact est requis.";
            isValid = false;
        }

        if (isValid)
        {
            // If all checks pass, navigate to the next page
            //Navigation.NavigateTo("/formulaireDemandeProduit");
            Checkpoint.InvokeAsync(3);
            OnPageSelected.InvokeAsync(3);
        }
    }

    //a mettre dans le component 
    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();

        // Remove any non-digit characters except dashes
        input = new string(input.Where(char.IsDigit).ToArray());

        // Limit to a maximum of 10 digits (excluding dashes)
        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }


        // Insert dashes at the correct positions
        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        // Set the formatted value back
        //contact.NumeroTelephone = input;
    }

    public class Contact
    {
        public string Prenom { get; set; } = string.Empty;
        public string Nom { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string NumeroTelephone { get; set; } = string.Empty;
        public string TypeTelephone { get; set; } = string.Empty;
        public string Poste { get; set; } = string.Empty;

        // Validation errors
        public string PrenomError { get; set; } = string.Empty;
        public string NomError { get; set; } = string.Empty;
        public string RoleError { get; set; } = string.Empty;
        public string EmailError { get; set; } = string.Empty;
        public string NumeroTelephoneError { get; set; } = string.Empty;
        public string TypeTelephoneError { get; set; } = string.Empty;
        public string PosteError { get; set; } = string.Empty;
    }
}
