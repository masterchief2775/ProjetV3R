@using System.Text.RegularExpressions
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }

        @for (int i = 0; i < contacts.Count; i++)
        {
            var contact = contacts[i];
            <div class="contact-entry mb-3 row">
                <div class="col-6 mb-3">
                    <label for="prenomInput" class="form-label">Prénom</label>
                    <input type="text" class="form-control" @bind="contact.Prenom" maxlength="32" required>
                    @if (!string.IsNullOrEmpty(contact.PrenomError))
                    {
                        <div class="text-danger">@contact.PrenomError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="nomInput" class="form-label">Nom</label>
                    <input type="text" class="form-control" @bind="contact.Nom" maxlength="32" required>
                    @if (!string.IsNullOrEmpty(contact.NomError))
                    {
                        <div class="text-danger">@contact.NomError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="roleInput" class="form-label">Fonction</label>
                    <input type="text" class="form-control" @bind="contact.Role" maxlength="32" required>
                    @if (!string.IsNullOrEmpty(contact.RoleError))
                    {
                        <div class="text-danger">@contact.RoleError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="emailInput" class="form-label">Email</label>
                    <input type="email" class="form-control" @bind="contact.Email" maxlength="64" required>
                    @if (!string.IsNullOrEmpty(contact.EmailError))
                    {
                        <div class="text-danger">@contact.EmailError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone</label>
                    <input type="tel" class="form-control" value="@contact.NumeroTelephone" placeholder="Ex: 123-456-7890"
                       @oninput="e => FormatTelephoneNumber(e, contact)" maxlength="12" required>
                    @if (!string.IsNullOrEmpty(contact.NumeroTelephoneError))
                    {
                        <div class="text-danger">@contact.NumeroTelephoneError</div>
                    }
                </div>


                <div class="col-6 mb-3">
                    <label for="typeTelephoneInput" class="form-label">Type de téléphone</label>
                    <select class="form-control" @bind="contact.TypeTelephone" required>
                        <option value="">Sélectionner...</option>
                        <option value="Bureau">Bureau</option>
                        <option value="Télécopieur">Télécopieur</option>
                        <option value="Cellulaire">Cellulaire</option>
                    </select>
                    @if (!string.IsNullOrEmpty(contact.TypeTelephoneError))
                    {
                        <div class="text-danger">@contact.TypeTelephoneError</div>
                    }
                </div>

                <div class="col-6 mb-3">
                    <label for="posteInput" class="form-label">Poste</label>
                    <input type="text" class="form-control" @bind="contact.Poste" maxlength="6" required>
                    @if (!string.IsNullOrEmpty(contact.PosteError))
                    {
                        <div class="text-danger">@contact.PosteError</div>
                    }
                </div>

                @if (i > 0) // Only show the button for contacts after the first one
                {
                    <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoveContact(contact)">Supprimer</button>
                }
            </div>
            <hr /> <!-- Separator line between contacts -->
        }

        <div class="d-flex align-items-center mb-3">
            <label class="me-2">Ajout</label>
            <button type="button" class="btn btn-success" @onclick="AddContact">+</button>
        </div>
        <button type="submit" class="btn btn-primary">Confirmer</button>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }

    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }

    private List<Contact> contacts = new List<Contact>();
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Initialize with one contact
        contacts.Add(new Contact());
    }

    private void AddContact()
    {
        contacts.Add(new Contact());
        errorMessage = string.Empty; // Clear error message when a contact is added
    }

    private void RemoveContact(Contact contact)
    {
        // Only allow removal if more than one contact exists
        if (contacts.Count > 1)
        {
            contacts.Remove(contact);
            errorMessage = string.Empty; // Clear error message when a contact is removed
        }
    }

    private void HandleSubmit()
    {
        // Reset errors
        ErrorReset();
        var isValid = true;

        // Validate all contact fields
        foreach (var contact in contacts)
        {
            ValidateInputs(contact);
        }

        // Check if any contact has errors
        isValid = contacts.All(c => string.IsNullOrEmpty(c.PrenomError) &&
                                      string.IsNullOrEmpty(c.NomError) &&
                                      string.IsNullOrEmpty(c.RoleError) &&
                                      string.IsNullOrEmpty(c.EmailError) &&
                                      string.IsNullOrEmpty(c.NumeroTelephoneError) &&
                                      string.IsNullOrEmpty(c.TypeTelephoneError) &&
                                      string.IsNullOrEmpty(c.PosteError));

        if (isValid)
        {
            // Log contact data
            var contactData = ExportFormData();
            LogToConsole(contactData);

            // If all checks pass, navigate to the next page
            Checkpoint.InvokeAsync(3);
            OnPageSelected.InvokeAsync(3);
        }
    }

    private void FormatTelephoneNumber(ChangeEventArgs e, Contact contact)
    {
        var input = e.Value?.ToString() ?? string.Empty;

        // Remove any non-digit characters
        input = new string(input.Where(char.IsDigit).ToArray());

        // Limit to a maximum of 10 digits
        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }

        // Format as XXX-XXX-XXXX
        if (input.Length >= 6)
        {
            input = $"{input.Substring(0, 3)}-{input.Substring(3, 3)}-{input.Substring(6)}";
        }
        else if (input.Length >= 3)
        {
            input = $"{input.Substring(0, 3)}-{input.Substring(3)}";
        }

        // Update the contact's NumeroTelephone directly
        contact.NumeroTelephone = input;
    }


    private void ValidateInputs(Contact contact)
    {
        contact.PrenomError = string.IsNullOrWhiteSpace(contact.Prenom) ? "Le prénom est requis." : string.Empty;
        contact.NomError = string.IsNullOrWhiteSpace(contact.Nom) ? "Le nom est requis." : string.Empty;
        contact.RoleError = string.IsNullOrWhiteSpace(contact.Role) ? "Le rôle est requis." : string.Empty;
        contact.EmailError = string.IsNullOrWhiteSpace(contact.Email) || !contact.Email.Contains("@") ? "Un email valide est requis." : string.Empty;

        // Updated phone number validation
        contact.NumeroTelephoneError = string.IsNullOrWhiteSpace(contact.NumeroTelephone) || !Regex.IsMatch(contact.NumeroTelephone, @"^\d{3}-\d{3}-\d{4}$") ? "Un numéro de téléphone valide est requis (format: XXX-XXX-XXXX)." : string.Empty;

        contact.TypeTelephoneError = string.IsNullOrWhiteSpace(contact.TypeTelephone) ? "Le type de téléphone est requis." : string.Empty;

        // Validate Poste
        if (string.IsNullOrWhiteSpace(contact.Poste))
        {
            contact.PosteError = "Le poste est requis.";
        }
        else if (!Regex.IsMatch(contact.Poste, @"^\d{1,6}$"))
        {
            contact.PosteError = "Le poste doit être numérique et contenir au maximum 6 chiffres.";
        }
        else
        {
            contact.PosteError = string.Empty; // Clear error if valid
        }
    }


    private void ErrorReset()
    {
        foreach (var contact in contacts)
        {
            contact.PrenomError = string.Empty;
            contact.NomError = string.Empty;
            contact.RoleError = string.Empty;
            contact.EmailError = string.Empty;
            contact.NumeroTelephoneError = string.Empty;
            contact.TypeTelephoneError = string.Empty;
            contact.PosteError = string.Empty;
        }
    }

    private string[][] ExportFormData()
    {
        return contacts.Select(c => new string[]
        {
            c.Prenom,
            c.Nom,
            c.Role,
            c.Email,
            c.NumeroTelephone,
            c.TypeTelephone,
            c.Poste
        }).ToArray();
    }

    private void LogToConsole(string[][] contactData)
    {
        foreach (var contact in contactData)
        {
            Console.WriteLine($"Prénom: {contact[0]}, Nom: {contact[1]}, Fonction: {contact[2]}, Email: {contact[3]}, Numéro de téléphone: {contact[4]}, Type de téléphone: {contact[5]}, Poste: {contact[6]}");
        }
    }


    public class Contact
    {
        public string Prenom { get; set; } = string.Empty;
        public string Nom { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string NumeroTelephone { get; set; } = string.Empty;
        public string TypeTelephone { get; set; } = string.Empty;
        public string Poste { get; set; } = string.Empty;

        // Error messages
        public string PrenomError { get; set; } = string.Empty;
        public string NomError { get; set; } = string.Empty;
        public string RoleError { get; set; } = string.Empty;
        public string EmailError { get; set; } = string.Empty;
        public string NumeroTelephoneError { get; set; } = string.Empty;
        public string TypeTelephoneError { get; set; } = string.Empty;
        public string PosteError { get; set; } = string.Empty;
    }
}
