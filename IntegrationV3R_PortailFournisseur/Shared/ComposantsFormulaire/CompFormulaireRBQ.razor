﻿@using IntegrationV3R_PortailFournisseur.Data.Services;﻿
@using IntegrationV3R_PortailFournisseur.Data.Models;﻿
@using Microsoft.EntityFrameworkCore;
@using System.Text.RegularExpressions;
@inject IntegrationV3R_PortailFournisseur.Data.Models.ApplicationDbContext dbContext


<div class="container-fluid mt-4">
    <form class="form" @onsubmit="HandleSubmit">
        <div class="row mb-3">
            <!-- Numéro RBQ -->
            <div class="col-md-4">
                <label for="rbqNumberInput" class="form-label">Numéro RBQ</label>
                <input type="text" class="form-control" id="rbqNumberInput"
                       @bind="SingletonForm.RBQNumberInput" maxlength="12" placeholder="Format: ####-####-##"
                       @oninput="FormatRbqNumber">
                @if (!string.IsNullOrEmpty(rbqNumberError))
                {
                    <div class="text-danger">@rbqNumberError</div>
                }
                <div id="neqHelp" class="form-text">
                    <a href="https://www.rbq.gouv.qc.ca/licence/" target="_blank">En savoir plus sur la licence RBQ</a>
                </div>
            </div>            
            
        </div>

        <div class="row mb-3">
            <!-- Statut -->
            <div class="col-md-4">
                <label for="statusSelect" class="form-label">Statut</label>
                <select class="form-select" id="statusSelect" @bind="SingletonForm.SelectedStatus">
                    <option value="">Choisissez un statut</option>
                    <option value="Active" >Valide</option>
                    <option value="Invalide" >Invalide</option>
                </select>
                @if (!string.IsNullOrEmpty(statusError))
                {
                    <div class="text-danger">@statusError</div>
                }
            </div>

            <!-- Type de licence -->
            <div class="col-md-4">
                <label for="licenseTypeSelect" class="form-label">Type de licence</label>
                <select class="form-select" id="licenseTypeSelect" @bind="SingletonForm.SelectedLicenseType">
                    <option value="">Choisissez un type de licence</option>
                    <option value="Entrepreneur">Entrepreneur</option>
                    <option value="Constructeur-proprietaire">Constructeur-Propriétaire</option>
                </select>
                @if (!string.IsNullOrEmpty(licenseTypeError))
                {
                    <div class="text-danger">@licenseTypeError</div>
                }
            </div>

            <!-- Catégorie -->
            <div class="col-md-4">
                <label for="categorySelect" class="form-label">Catégorie</label>
                <select class="form-select" id="categorySelect" @bind="SingletonForm.SelectedCategory">
                    <option value="">Choisissez une catégorie</option>
                    <option value="Generale">Générale</option>
                    <option value="Specialisee">Spécialisé</option>
                </select>
                @if (!string.IsNullOrEmpty(categoryError))
                {
                    <div class="text-danger">@categoryError</div>
                }
            </div>
        </div>

        <!-- Sous-catégories Search -->
        <div class="mb-3">
            <label for="subCategorySearch" class="form-label">Sous-catégories</label>
            <input type="text" class="form-control" id="subCategorySearch"
                   @bind="@subCategorySearch" @oninput="@OnSubCategoryInput"
                   placeholder="Recherchez des sous-catégories..." />

            @if (filteredSubCategories != null && filteredSubCategories.Any())
            {
                <!-- Wrapper div to add scrollbar functionality -->
                <div class="overflow-auto" style="max-height: 200px;">
                    <ul class="list-group" id="subCategoryResults">
                        @foreach (var subCategory in filteredSubCategories)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => SelectSubCategory(subCategory)">
                                @subCategory.NumeroSousCategorieAfter2008 - @subCategory.NomSousCategorieAfter2008                                
                            </li>
                        }
                    </ul>
                </div>
            }

            @if (!string.IsNullOrEmpty(subCategoryError))
            {
                <div class="text-danger">@subCategoryError</div> <!-- Display the error message here -->
            }
        </div>



        <!-- Catégories sélectionnées -->
        <div class="mb-3">
            <h5>Sous-catégories sélectionnées</h5>
            <ul>
                @if (SingletonForm.SelectedSubCategories.Any())
                {
                    foreach (var category in SingletonForm.SelectedSubCategories)
                    {
                        <li>
                            <strong>@category.NumeroSousCategorieAfter2008 - @category.NomSousCategorieAfter2008</strong>
                            <button type="button" class="btn btn-link text-danger btn-sm"
                            @onclick="() => RemoveSubCategory(category)"
                            style="margin-left: 10px; padding: 0;">
                                &times;
                            </button>
                        </li>
                    }
                }
                else
                {
                    <li>Aucune catégorie sélectionnée.</li>
                }
            </ul>
        </div>

        <button type="submit" class="btn btn-primary">Suivant</button>
    </form>    
</div>

@code {
    [Inject] private SharedDataService SharedData { get; set; }
    [Inject] private SingletonFormulaire SingletonForm { get; set; }

    // Parameters and Variables
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }
    [Parameter]
    public EventCallback<int> Checkpoint { get; set; }
    [Parameter]
    public EventCallback<bool> BDFetched { get; set; }


    private string subCategorySearch = string.Empty;

    private string rbqNumberError = string.Empty;
    private string statusError = string.Empty;
    private string licenseTypeError = string.Empty;
    private string categoryError = string.Empty;
    private string subCategoryError = string.Empty; // New error message for sub-categories

    // License types and categories
    private List<string> licenseTypes = new List<string> { "Entrepreneur", "Constructeur-Propriétaire" };   
    private List<Souscategoriesafter2008> fetchedSousCategories = new List<Souscategoriesafter2008>();
    private List<Souscategoriesafter2008> filteredSubCategories = new List<Souscategoriesafter2008>(); // To hold search results

    public List<Licencesrbq> currentLicences = new List<Licencesrbq>();


    public async Task FetchDataDB()
    {     // Appel à la base de données pour récupérer les régions

        try
        {
            // Appel à la base de données pour récupérer les régions
            fetchedSousCategories = await dbContext.Souscategoriesafter2008s.ToListAsync();
            currentLicences = await dbContext.Licencesrbqs.ToListAsync();
        }
        catch (Exception ex)
        {
            subCategoryError = "Erreur lors de la récupération 'a la BD.";
            Console.WriteLine(ex.Message);
        }
        await BDFetched.InvokeAsync();
    }


    public void LoadSharedData()
    {
        SingletonForm.RBQNumberInput = SharedData.NumLicence;

        SingletonForm.SelectedStatus = SharedData.StatutLicence;
        if (SharedData.StatutLicence != "Active")
            SingletonForm.SelectedStatus = "Invalide";

        SingletonForm.SelectedLicenseType = SharedData.TypeLicence;
        SingletonForm.SelectedCategory = SharedData.CategorieLicence;

        StateHasChanged();
    }

    // Handle submitting the form
    private async Task HandleSubmit()
    {
        var isValid = ValidateInputs();

        if (isValid)
        {
            CheckForEmptyRBQ();

            // Proceed with further logic, e.g., saving the data or navigating to another page
            await Checkpoint.InvokeAsync(5);
            await OnPageSelected.InvokeAsync(5); // Adjust the argument as necessary
        }
    }

    public async Task HandleSubmitReturn(int pageID)
    {
        var isValid = ValidateInputs();

        if (isValid)
        {
            CheckForEmptyRBQ();

            // Proceed with further logic, e.g., saving the data or navigating to another page
            await OnPageSelected.InvokeAsync(pageID); // Adjust the argument as necessary  
        }

    }    

    private bool ValidateInputs()
    {
        ResetErrors();

        var isValid = true;

        // Validation logic
        if (!string.IsNullOrWhiteSpace(SingletonForm.RBQNumberInput))
        {
            if (!IsValidRbqNumber(SingletonForm.RBQNumberInput))
            {
                rbqNumberError = "Le numéro RBQ doit être au format ####-####-##.";
                isValid = false;
            }   

            string cleanRBQ = Regex.Replace(SingletonForm.RBQNumberInput, @"-", "");
            foreach(Licencesrbq licence in currentLicences)
            {
                if(licence.NumLicence == SingletonForm.RBQNumberInput)
                {
                    rbqNumberError = "Cette licence RBQ est déjà assigné. Veulliez confirmer qu'elle est bien inscrit";
                    isValid = false;
                }
            }

        }


        if (!string.IsNullOrWhiteSpace(SingletonForm.RBQNumberInput) && string.IsNullOrEmpty(SingletonForm.SelectedStatus))
        {
            statusError = "Le statut est requis.";
            isValid = false;
        }
        if (!string.IsNullOrWhiteSpace(SingletonForm.RBQNumberInput) && string.IsNullOrEmpty(SingletonForm.SelectedLicenseType))
        {
            licenseTypeError = "Le type de licence est requis.";
            isValid = false;
        }
        if (!string.IsNullOrWhiteSpace(SingletonForm.RBQNumberInput) && string.IsNullOrWhiteSpace(SingletonForm.SelectedCategory))
        {
            categoryError = "La catégorie est requise.";
            isValid = false;
        }
        else if (SingletonForm.SelectedCategory != "Generale" && SingletonForm.SelectedCategory != "Specialisee")
        {
            categoryError = "Catégorie " + SingletonForm.SelectedCategory + " invalide. Veuillez choisir parmis les choix";
            isValid = false;
        }

        if (!string.IsNullOrWhiteSpace(SingletonForm.RBQNumberInput) && !SingletonForm.SelectedSubCategories.Any()) // Check if at least one sub-category is selected
        {
            subCategoryError = "Au moins une sous-catégorie doit être sélectionnée.";
            isValid = false;
        }

        return isValid;
    }

    private void ResetErrors()
    {
        rbqNumberError = string.Empty;
        statusError = string.Empty;
        licenseTypeError = string.Empty;
        categoryError = string.Empty;
        subCategoryError = string.Empty; // Reset sub-category error
    }

    private void CheckForEmptyRBQ()
    {
        if (SingletonForm.RBQNumberInput == string.Empty)
        {
            SingletonForm.SelectedStatus = "";
            SingletonForm.SelectedLicenseType = "";
            SingletonForm.SelectedCategory = "";
        }
    }

    // Check if the RBQ number is valid
    private bool IsValidRbqNumber(string value)
    {
        // Check if the input matches the desired format ####-####-##
        return System.Text.RegularExpressions.Regex.IsMatch(value, @"^\d{4}-\d{4}-\d{2}$");
    }

    // Format RBQ number while typing
    private void FormatRbqNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        // Remove non-digit characters
        input = new string(input.Where(char.IsDigit).ToArray());

        // Format input to ####-####-##
        if (input.Length > 0)
        {
            // Append hyphens as necessary
            if (input.Length > 8)
            {
                input = input.Insert(8, "-");
            }
            if (input.Length > 4)
            {
                input = input.Insert(4, "-");
            }
            // Limit to 12 characters
            input = input.Substring(0, Math.Min(input.Length, 12));
        }

        SingletonForm.RBQNumberInput = input; // Update the input value
    }

    // Search sub-categories dynamically
    private void OnSubCategoryInput(ChangeEventArgs e)
    {
        subCategorySearch = e.Value?.ToString() ?? string.Empty;

        // Only call SearchSubCategories if there are at least 3 characters
        if (subCategorySearch.Length >= 2)
        {
            SearchSubCategories();
        }
        else
        {
            filteredSubCategories.Clear(); // Clear results if less than 3 characters
        }
    }

    // Filter the sub-categories based on the search input
    private void SearchSubCategories()
    {
        // Filter the sub-categories based on the search input
        filteredSubCategories.Clear();

        foreach (var categorie in fetchedSousCategories)
        {
            if (categorie.NomSousCategorieAfter2008.Contains(subCategorySearch, StringComparison.OrdinalIgnoreCase) || categorie.NumeroSousCategorieAfter2008.Contains(subCategorySearch, StringComparison.OrdinalIgnoreCase))
            {
                if (!SingletonForm.SelectedSubCategories.Contains(categorie))
                {
                    filteredSubCategories.Add(categorie);
                }                
            }
        }
    }

    // Select a sub-category
    private void SelectSubCategory(Souscategoriesafter2008 subCategory)
    {
        if (!SingletonForm.SelectedSubCategories.Contains(subCategory))
        {
            SingletonForm.SelectedSubCategories.Add(subCategory);
            subCategorySearch = string.Empty; // Clear the search box after selection
            filteredSubCategories.Clear(); // Clear the search results
        }
    }

    // Remove a sub-category from the selection
    private void RemoveSubCategory(Souscategoriesafter2008 category)
    {
        SingletonForm.SelectedSubCategories.Remove(category);
    }
}