@*@using System.Text.RegularExpressions




<div class="contact-entry mb-3 row">
    <div class="col-6 mb-3">
        <label for="prenomInput" class="form-label">Prénom</label>
        <input type="text" class="form-control" @bind="Prenom" maxlength="32">
        @if (!string.IsNullOrEmpty(PrenomError))
        {
            <div class="text-danger">@PrenomError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="nomInput" class="form-label">Nom</label>
        <input type="text" class="form-control" @bind="Nom" maxlength="32">
        @if (!string.IsNullOrEmpty(NomError))
        {
            <div class="text-danger">@NomError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="roleInput" class="form-label">Fonction</label>
        <input type="text" class="form-control" @bind="Role" maxlength="32">
        @if (!string.IsNullOrEmpty(RoleError))
        {
            <div class="text-danger">@RoleError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="emailInput" class="form-label">Email</label>
        <input type="email" class="form-control" @bind="Email" maxlength="64">
        @if (!string.IsNullOrEmpty(EmailError))
        {
            <div class="text-danger">@EmailError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="numeroTelephoneInput" class="form-label">Numéro de téléphone</label>
        <input type="tel" class="form-control" @bind="NumeroTelephone" placeholder="Ex: 123-456-7890" @oninput="FormatTelephoneNumber" maxlength="12">
        @if (!string.IsNullOrEmpty(NumeroTelephoneError))
        {
            <div class="text-danger">@NumeroTelephoneError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="typeTelephoneInput" class="form-label">Type de téléphone</label>
        <select class="form-control" @bind="TypeTelephone">
            <option value="">Sélectionner...</option>
            <option value="Bureau">Bureau</option>
            <option value="Télécopieur">Télécopieur</option>
            <option value="Cellulaire">Cellulaire</option>
        </select>
        @if (!string.IsNullOrEmpty(TypeTelephoneError))
        {
            <div class="text-danger">@TypeTelephoneError</div>
        }
    </div>

    <div class="col-6 mb-3">
        <label for="posteInput" class="form-label">Poste</label>
        <input type="text" class="form-control" @bind="Poste" maxlength="6">
        @if (!string.IsNullOrEmpty(PosteError))
        {
            <div class="text-danger">@PosteError</div>
        }
    </div>

    <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoveContact">Supprimer</button>
</div>

@code { 
    [Parameter]
    public EventCallback OnRemove { get; set; }


    public string Prenom { get; set; } = string.Empty;
    public string Nom { get; set; } = string.Empty;
    public string Role { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string NumeroTelephone { get; set; } = string.Empty;
    public string TypeTelephone { get; set; } = string.Empty;
    public string Poste { get; set; } = string.Empty;

    // Validation errors
    public string PrenomError { get; set; } = string.Empty;
    public string NomError { get; set; } = string.Empty;
    public string RoleError { get; set; } = string.Empty;
    public string EmailError { get; set; } = string.Empty;
    public string NumeroTelephoneError { get; set; } = string.Empty;
    public string TypeTelephoneError { get; set; } = string.Empty;
    public string PosteError { get; set; } = string.Empty; 

    private async Task RemoveContact
    {
        
    }
   

    private void FormatTelephoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString();

        // Remove any non-digit characters except dashes
        input = new string(input.Where(char.IsDigit).ToArray());

        // Limit to a maximum of 10 digits (excluding dashes)
        if (input.Length > 10)
        {
            input = input.Substring(0, 10);
        }


        // Insert dashes at the correct positions
        if (input.Length > 3)
        {
            input = input.Insert(3, "-");
        }
        if (input.Length > 7)
        {
            input = input.Insert(7, "-");
        }

        // Set the formatted value back
        contact.NumeroTelephone = input;
    }
    
}
*@